#
# 
#
# Generated by <a href="http://enunciate.codehaus.org">Enunciate</a>.
#
require 'json'

# adding necessary json serialization methods to standard classes.
class Object
  def to_jaxb_json_hash
    return self
  end
  def self.from_json o
    return o
  end
end

class String
  def self.from_json o
    return o
  end
end

class Boolean
  def self.from_json o
    return o
  end
end

class Numeric
  def self.from_json o
    return o
  end
end

class Time
  #json time is represented as number of milliseconds since epoch
  def to_jaxb_json_hash
    return (to_i * 1000) + (usec / 1000)
  end
  def self.from_json o
    if o.nil?
      return nil
    else
      return Time.at(o / 1000, (o % 1000) * 1000)
    end
  end
end

class Array
  def to_jaxb_json_hash
    a = Array.new
    each { | _item | a.push _item.to_jaxb_json_hash }
    return a
  end
end

class Hash
  def to_jaxb_json_hash
    h = Hash.new
    each { | _key, _value | h[_key.to_jaxb_json_hash] = _value.to_jaxb_json_hash }
    return h
  end
end


module Org

  module Gedcomx

    module Common

      # A data qualifier. Qualifiers are used to "qualify" certain data elements to provide additional context, information, or details.
      class Qualifier

        # The value of the qualifier.
        attr_accessor :value

        # the json hash for this Qualifier
        def to_jaxb_json_hash
          _h = {}
          _h['value'] = value.to_jaxb_json_hash unless value.nil?
          return _h
        end

        # the json (string form) for this Qualifier
        def to_json
          to_jaxb_json_hash.to_json
        end

        #initializes this Qualifier with a json hash
        def init_jaxb_json_hash(_o)
          @value = String.from_json(_o['value']) unless _o['value'].nil?
        end

        # constructs a Qualifier from a (parsed) JSON hash
        def self.from_json(o)
          if o.nil?
            return nil
          else
            inst = new
            inst.init_jaxb_json_hash o
            return inst
          end
        end
      end

    end

  end

end

module Org

  module Gedcomx

    module Conclusion

      # An identifier for a resource.
      class Identifier

        # The type of the id.
        attr_accessor :type
        # The id value.
        attr_accessor :value

        # the json hash for this Identifier
        def to_jaxb_json_hash
          _h = {}
          _h['type'] = type.to_jaxb_json_hash unless type.nil?
          _h['value'] = value.to_jaxb_json_hash unless value.nil?
          return _h
        end

        # the json (string form) for this Identifier
        def to_json
          to_jaxb_json_hash.to_json
        end

        #initializes this Identifier with a json hash
        def init_jaxb_json_hash(_o)
          @type = String.from_json(_o['type']) unless _o['type'].nil?
          @value = String.from_json(_o['value']) unless _o['value'].nil?
        end

        # constructs a Identifier from a (parsed) JSON hash
        def self.from_json(o)
          if o.nil?
            return nil
          else
            inst = new
            inst.init_jaxb_json_hash o
            return inst
          end
        end
      end

    end

  end

end

module Org

  module Gedcomx

    module Links

      # A hypermedia link, used to drive the state of a hypermedia-enabled genealogical data application.
      class Link

        # The language of the resource being linked to.
        attr_accessor :hreflang
        # A URI template per &lt;a href=&quot;http://tools.ietf.org/html/rfc6570&quot;&gt;RFC 6570&lt;/a&gt;, used to link to a range of
        # URIs, such as for the purpose of linking to a query.
        attr_accessor :template
        # Human-readable information about the link.
        attr_accessor :title
        # Metadata about the available media type(s) of the resource being linked to.
        attr_accessor :allow
        # Metadata about the available media type(s) of the resource being linked to.
        attr_accessor :accept
        # The link relationship.
        attr_accessor :rel
        # Metadata about the available media type(s) of the resource being linked to.
        attr_accessor :type
        # The target IRI of the link.
        attr_accessor :href

        # the json hash for this Link
        def to_jaxb_json_hash
          _h = {}
          _h['hreflang'] = hreflang.to_jaxb_json_hash unless hreflang.nil?
          _h['template'] = template.to_jaxb_json_hash unless template.nil?
          _h['title'] = title.to_jaxb_json_hash unless title.nil?
          _h['allow'] = allow.to_jaxb_json_hash unless allow.nil?
          _h['accept'] = accept.to_jaxb_json_hash unless accept.nil?
          _h['rel'] = rel.to_jaxb_json_hash unless rel.nil?
          _h['type'] = type.to_jaxb_json_hash unless type.nil?
          _h['href'] = href.to_jaxb_json_hash unless href.nil?
          return _h
        end

        # the json (string form) for this Link
        def to_json
          to_jaxb_json_hash.to_json
        end

        #initializes this Link with a json hash
        def init_jaxb_json_hash(_o)
          @hreflang = String.from_json(_o['hreflang']) unless _o['hreflang'].nil?
          @template = String.from_json(_o['template']) unless _o['template'].nil?
          @title = String.from_json(_o['title']) unless _o['title'].nil?
          @allow = String.from_json(_o['allow']) unless _o['allow'].nil?
          @accept = String.from_json(_o['accept']) unless _o['accept'].nil?
          @rel = String.from_json(_o['rel']) unless _o['rel'].nil?
          @type = String.from_json(_o['type']) unless _o['type'].nil?
          @href = String.from_json(_o['href']) unless _o['href'].nil?
        end

        # constructs a Link from a (parsed) JSON hash
        def self.from_json(o)
          if o.nil?
            return nil
          else
            inst = new
            inst.init_jaxb_json_hash o
            return inst
          end
        end
      end

    end

  end

end

module Org

  module Gedcomx

    module Records

      # A description of a field in a record.
      class FieldDescriptor

        # Whether the original value should be used when displaying the field.
        attr_accessor :displayOriginalValue
        # Human-readable description of the field.
        attr_accessor :description
        # The way the label of the field should be displayed, taking into account e.g. the language of the consumer.
        attr_accessor :displayLabel
        # The original value of the field label, as it appears on the record.
        attr_accessor :originalLabel
        # A system-specific identifier for the field.
        attr_accessor :systemLabel

        # the json hash for this FieldDescriptor
        def to_jaxb_json_hash
          _h = {}
          _h['displayOriginalValue'] = displayOriginalValue.to_jaxb_json_hash unless displayOriginalValue.nil?
          _h['description'] = description.to_jaxb_json_hash unless description.nil?
          _h['displayLabel'] = displayLabel.to_jaxb_json_hash unless displayLabel.nil?
          _h['originalLabel'] = originalLabel.to_jaxb_json_hash unless originalLabel.nil?
          _h['systemLabel'] = systemLabel.to_jaxb_json_hash unless systemLabel.nil?
          return _h
        end

        # the json (string form) for this FieldDescriptor
        def to_json
          to_jaxb_json_hash.to_json
        end

        #initializes this FieldDescriptor with a json hash
        def init_jaxb_json_hash(_o)
          @displayOriginalValue = Boolean.from_json(_o['displayOriginalValue']) unless _o['displayOriginalValue'].nil?
          @description = String.from_json(_o['description']) unless _o['description'].nil?
          @displayLabel = String.from_json(_o['displayLabel']) unless _o['displayLabel'].nil?
          @originalLabel = String.from_json(_o['originalLabel']) unless _o['originalLabel'].nil?
          @systemLabel = String.from_json(_o['systemLabel']) unless _o['systemLabel'].nil?
        end

        # constructs a FieldDescriptor from a (parsed) JSON hash
        def self.from_json(o)
          if o.nil?
            return nil
          else
            inst = new
            inst.init_jaxb_json_hash o
            return inst
          end
        end
      end

    end

  end

end

module Org

  module Gedcomx

    module Source

      # Represents a citation field -- its name and value.
      class CitationField

        # The citation field's name.
        attr_accessor :name
        # The citation field's value.
        attr_accessor :value

        # the json hash for this CitationField
        def to_jaxb_json_hash
          _h = {}
          _h['name'] = name.to_jaxb_json_hash unless name.nil?
          _h['value'] = value.to_jaxb_json_hash unless value.nil?
          return _h
        end

        # the json (string form) for this CitationField
        def to_json
          to_jaxb_json_hash.to_json
        end

        #initializes this CitationField with a json hash
        def init_jaxb_json_hash(_o)
          @name = String.from_json(_o['name']) unless _o['name'].nil?
          @value = String.from_json(_o['value']) unless _o['value'].nil?
        end

        # constructs a CitationField from a (parsed) JSON hash
        def self.from_json(o)
          if o.nil?
            return nil
          else
            inst = new
            inst.init_jaxb_json_hash o
            return inst
          end
        end
      end

    end

  end

end

module Org

  module Gedcomx

    module Common

      # An element representing a text value that may be in a specific language.
      class TextValue

        # The language of the text value.
        attr_accessor :lang
        # The text value.
        attr_accessor :value

        # the json hash for this TextValue
        def to_jaxb_json_hash
          _h = {}
          _h['lang'] = lang.to_jaxb_json_hash unless lang.nil?
          _h['value'] = value.to_jaxb_json_hash unless value.nil?
          return _h
        end

        # the json (string form) for this TextValue
        def to_json
          to_jaxb_json_hash.to_json
        end

        #initializes this TextValue with a json hash
        def init_jaxb_json_hash(_o)
          @lang = String.from_json(_o['lang']) unless _o['lang'].nil?
          @value = String.from_json(_o['value']) unless _o['value'].nil?
        end

        # constructs a TextValue from a (parsed) JSON hash
        def self.from_json(o)
          if o.nil?
            return nil
          else
            inst = new
            inst.init_jaxb_json_hash o
            return inst
          end
        end
      end

    end

  end

end

module Org

  module Gedcomx

    module Common

      # A generic reference to a resource.
      class ResourceReference

        # The resource id of the resource being referenced.
        attr_accessor :resourceId
        # The URI to the resource.
        attr_accessor :resource

        # the json hash for this ResourceReference
        def to_jaxb_json_hash
          _h = {}
          _h['resourceId'] = resourceId.to_jaxb_json_hash unless resourceId.nil?
          _h['resource'] = resource.to_jaxb_json_hash unless resource.nil?
          return _h
        end

        # the json (string form) for this ResourceReference
        def to_json
          to_jaxb_json_hash.to_json
        end

        #initializes this ResourceReference with a json hash
        def init_jaxb_json_hash(_o)
          @resourceId = String.from_json(_o['resourceId']) unless _o['resourceId'].nil?
          @resource = String.from_json(_o['resource']) unless _o['resource'].nil?
        end

        # constructs a ResourceReference from a (parsed) JSON hash
        def self.from_json(o)
          if o.nil?
            return nil
          else
            inst = new
            inst.init_jaxb_json_hash o
            return inst
          end
        end
      end

    end

  end

end

module Org

  module Gedcomx

    module Common

      # A set of data that supports extension elements.
      class ExtensibleData

        # A local, context-specific id for the data.
        attr_accessor :id

        # the json hash for this ExtensibleData
        def to_jaxb_json_hash
          _h = {}
          _h['id'] = id.to_jaxb_json_hash unless id.nil?
          return _h
        end

        # the json (string form) for this ExtensibleData
        def to_json
          to_jaxb_json_hash.to_json
        end

        #initializes this ExtensibleData with a json hash
        def init_jaxb_json_hash(_o)
          @id = String.from_json(_o['id']) unless _o['id'].nil?
        end

        # constructs a ExtensibleData from a (parsed) JSON hash
        def self.from_json(o)
          if o.nil?
            return nil
          else
            inst = new
            inst.init_jaxb_json_hash o
            return inst
          end
        end
      end

    end

  end

end

module Org

  module Gedcomx

    module Conclusion

      # A reference to genealogical place.
      class PlaceReference < Org::Gedcomx::Common::ExtensibleData

        # A reference to a description of the place being referenced.
        attr_accessor :descriptionRef
        # The original value as supplied by the user.
        attr_accessor :original
        # The references to the record field values being used as evidence.
        attr_accessor :fieldValueReferences

        # the json hash for this PlaceReference
        def to_jaxb_json_hash
          _h = super
          _h['description'] = descriptionRef.to_jaxb_json_hash unless descriptionRef.nil?
          _h['original'] = original.to_jaxb_json_hash unless original.nil?
          if !fieldValueReferences.nil?
            _ha = Array.new
            fieldValueReferences.each { | _item | _ha.push _item.to_jaxb_json_hash }
            _h['fieldValues'] = _ha
          end
          return _h
        end

        #initializes this PlaceReference with a json hash
        def init_jaxb_json_hash(_o)
          super _o
          @descriptionRef = String.from_json(_o['description']) unless _o['description'].nil?
          @original = String.from_json(_o['original']) unless _o['original'].nil?
          if !_o['fieldValues'].nil?
            @fieldValueReferences = Array.new
            _oa = _o['fieldValues']
            _oa.each { | _item | @fieldValueReferences.push Org::Gedcomx::Common::EvidenceReference.from_json(_item) }
          end
        end

        # constructs a PlaceReference from a (parsed) JSON hash
        def self.from_json(o)
          if o.nil?
            return nil
          else
            inst = new
            inst.init_jaxb_json_hash o
            return inst
          end
        end
      end

    end

  end

end

module Org

  module Gedcomx

    module Links

      # An data type that supports hypermedia controls (i.e. links).
      class HypermediaEnabledData < Org::Gedcomx::Common::ExtensibleData

        # The list of hypermedia links. Links are not specified by GEDCOM X core, but as extension elements by GEDCOM X RS.
        attr_accessor :links

        # the json hash for this HypermediaEnabledData
        def to_jaxb_json_hash
          _h = super
          if !links.nil?
            _ha = Array.new
            links.each { | _item | _ha.push _item.to_jaxb_json_hash }
            _h['links'] = _ha
          end
          return _h
        end

        #initializes this HypermediaEnabledData with a json hash
        def init_jaxb_json_hash(_o)
          super _o
          if !_o['links'].nil?
            @links = Array.new
            _oa = _o['links']
            _oa.each { | _item | @links.push Org::Gedcomx::Links::Link.from_json(_item) }
          end
        end

        # constructs a HypermediaEnabledData from a (parsed) JSON hash
        def self.from_json(o)
          if o.nil?
            return nil
          else
            inst = new
            inst.init_jaxb_json_hash o
            return inst
          end
        end
      end

    end

  end

end

module Org

  module Gedcomx

    module Types

      # Enumeration of standard event types.
      class EventType

        #  An adoption event.
        Adoption = "{http://gedcomx.org/}Adoption"

        #  An adult christening event.
        AdultChristening = "{http://gedcomx.org/}AdultChristening"

        #  An annulment event of a marriage.
        Annulment = "{http://gedcomx.org/}Annulment"

        #  A baptism event.
        Baptism = "{http://gedcomx.org/}Baptism"

        #  A bar mitzvah event.
        BarMitzvah = "{http://gedcomx.org/}BarMitzvah"

        #  A bat mitzvah event.
        BatMitzvah = "{http://gedcomx.org/}BatMitzvah"

        #  A birth event.
        Birth = "{http://gedcomx.org/}Birth"

        #  A an official blessing event, such as at the hands of a clergy member or at another religious rite.
        Blessing = "{http://gedcomx.org/}Blessing"

        #  A burial event.
        Burial = "{http://gedcomx.org/}Burial"

        #  A census event.
        Census = "{http://gedcomx.org/}Census"

        #  A christening event *at birth*. Note: use `AdultChristening` for a christening event as an adult.
        Christening = "{http://gedcomx.org/}Christening"

        #  A circumcision event.
        Circumcision = "{http://gedcomx.org/}Circumcision"

        #  A confirmation event (or other rite of initiation) in a church or religion.
        Confirmation = "{http://gedcomx.org/}Confirmation"

        #  A cremation event after death.
        Cremation = "{http://gedcomx.org/}Cremation"

        #  A death event.
        Death = "{http://gedcomx.org/}Death"

        #  A divorce event.
        Divorce = "{http://gedcomx.org/}Divorce"

        #  A divorce filing event.
        DivorceFiling = "{http://gedcomx.org/}DivorceFiling"

        #  A education or an educational achievement event (e.g. diploma, graduation, scholarship, etc.).
        Education = "{http://gedcomx.org/}Education"

        #  An engagement to be married event.
        Engagement = "{http://gedcomx.org/}Engagement"

        #  An emigration event.
        Emigration = "{http://gedcomx.org/}Emigration"

        #  An excommunication event from a church.
        Excommunication = "{http://gedcomx.org/}Excommunication"

        #  A first communion event.
        FirstCommunion = "{http://gedcomx.org/}FirstCommunion"

        #  A funeral event.
        Funeral = "{http://gedcomx.org/}Funeral"

        #  An immigration event.
        Immigration = "{http://gedcomx.org/}Immigration"

        #  A land transaction event.
        LandTransation = "{http://gedcomx.org/}LandTransation"

        #  A marriage event.
        Marriage = "{http://gedcomx.org/}Marriage"

        #  A military award event.
        MilitaryAward = "{http://gedcomx.org/}MilitaryAward"

        #  A military discharge event.
        MilitaryDischarge = "{http://gedcomx.org/}MilitaryDischarge"

        #  A mission event.
        Mission = "{http://gedcomx.org/}Mission"

        #  An event of a move (i.e. change of residence) from a location.
        MoveFrom = "{http://gedcomx.org/}MoveFrom"

        #  An event of a move (i.e. change of residence) to a location.
        MoveTo = "{http://gedcomx.org/}MoveTo"

        #  A naturalization event (i.e. acquisition of citizenship and nationality).
        Naturalization = "{http://gedcomx.org/}Naturalization"

        #  An ordination event.
        Ordination = "{http://gedcomx.org/}Ordination"

        #  A retirement event.
        Retirement = "{http://gedcomx.org/}Retirement"
      end

    end

  end

end

module Org

  module Gedcomx

    module Types

      # Enumeration of known field value types.
      class FieldValueType

        #  The field value is original, extracted directly from the record. What you see is what you get, including misspellings and other errors in the record.
        Original = "{http://gedcomx.org/}Original"

        #  The field value is interpreted, meaning a user or other automated process applied some reasoning to interpret the value.
        Interpreted = "{http://gedcomx.org/}Interpreted"
      end

    end

  end

end

module Org

  module Gedcomx

    module Types

      # Enumeration of known gender types.
      class GenderType

        #  Male.
        Male = "{http://gedcomx.org/}Male"

        #  Female.
        Female = "{http://gedcomx.org/}Female"

        #  Unknown. Note that this should be used strictly as &quot;unknown&quot; and not to
        #  indicate a type that is not set or not understood.
        Unknown = "{http://gedcomx.org/}Unknown"
      end

    end

  end

end

module Org

  module Gedcomx

    module Types

      # Enumeration of known fields.
      class FieldType

        # (no documentation provided)
        Age = "{http://gedcomx.org/}Age"

        # (no documentation provided)
        Date = "{http://gedcomx.org/}Date"

        # (no documentation provided)
        Place = "{http://gedcomx.org/}Place"

        # (no documentation provided)
        Gender = "{http://gedcomx.org/}Gender"

        # (no documentation provided)
        Name = "{http://gedcomx.org/}Name"

        # (no documentation provided)
        Role = "{http://gedcomx.org/}Role"

        # (no documentation provided)
        Years = "{http://gedcomx.org/}Years"

        # (no documentation provided)
        Months = "{http://gedcomx.org/}Months"

        # (no documentation provided)
        Days = "{http://gedcomx.org/}Days"

        # (no documentation provided)
        Hours = "{http://gedcomx.org/}Hours"

        # (no documentation provided)
        Minutes = "{http://gedcomx.org/}Minutes"

        # (no documentation provided)
        Year = "{http://gedcomx.org/}Year"

        # (no documentation provided)
        Month = "{http://gedcomx.org/}Month"

        # (no documentation provided)
        Day = "{http://gedcomx.org/}Day"

        # (no documentation provided)
        Hour = "{http://gedcomx.org/}Hour"

        # (no documentation provided)
        Minute = "{http://gedcomx.org/}Minute"

        # (no documentation provided)
        Address = "{http://gedcomx.org/}Address"

        # (no documentation provided)
        Cemetery = "{http://gedcomx.org/}Cemetery"

        # (no documentation provided)
        City = "{http://gedcomx.org/}City"

        # (no documentation provided)
        Church = "{http://gedcomx.org/}Church"

        # (no documentation provided)
        County = "{http://gedcomx.org/}County"

        # (no documentation provided)
        Country = "{http://gedcomx.org/}Country"

        # (no documentation provided)
        District = "{http://gedcomx.org/}District"

        # (no documentation provided)
        Hospital = "{http://gedcomx.org/}Hospital"

        # (no documentation provided)
        Island = "{http://gedcomx.org/}Island"

        # (no documentation provided)
        MilitaryBase = "{http://gedcomx.org/}MilitaryBase"

        # (no documentation provided)
        Mortuary = "{http://gedcomx.org/}Mortuary"

        # (no documentation provided)
        Parish = "{http://gedcomx.org/}Parish"

        # (no documentation provided)
        PlotNumber = "{http://gedcomx.org/}PlotNumber"

        # (no documentation provided)
        PostOffice = "{http://gedcomx.org/}PostOffice"

        # (no documentation provided)
        PostalCode = "{http://gedcomx.org/}PostalCode"

        # (no documentation provided)
        Prison = "{http://gedcomx.org/}Prison"

        # (no documentation provided)
        Province = "{http://gedcomx.org/}Province"

        # (no documentation provided)
        Section = "{http://gedcomx.org/}Section"

        # (no documentation provided)
        Ship = "{http://gedcomx.org/}Ship"

        # (no documentation provided)
        State = "{http://gedcomx.org/}State"

        # (no documentation provided)
        Territory = "{http://gedcomx.org/}Territory"

        # (no documentation provided)
        Town = "{http://gedcomx.org/}Town"

        # (no documentation provided)
        Township = "{http://gedcomx.org/}Township"

        # (no documentation provided)
        Ward = "{http://gedcomx.org/}Ward"

        # (no documentation provided)
        Prefix = "{http://gedcomx.org/}Prefix"

        # (no documentation provided)
        Suffix = "{http://gedcomx.org/}Suffix"

        # (no documentation provided)
        Given = "{http://gedcomx.org/}Given"

        # (no documentation provided)
        Surname = "{http://gedcomx.org/}Surname"
      end

    end

  end

end

module Org

  module Gedcomx

    module Types

      # Enumeration of standard fact types.
      class FactType

        #  A fact of a person's adoption. In the context of a parent-child relationship, it describes a fact of the adoption of a child by a parent.
        Adoption = "{http://gedcomx.org/}Adoption"

        #  A fact of a person's christening as an adult.
        AdultChristening = "{http://gedcomx.org/}AdultChristening"

        #  A fact of a person's amnesty.
        Amnesty = "{http://gedcomx.org/}Amnesty"

        #  A fact of a person's apprenticeship.
        Apprenticeship = "{http://gedcomx.org/}Apprenticeship"

        #  A fact of a person's baptism.
        Baptism = "{http://gedcomx.org/}Baptism"

        #  A fact of a person's bar mitzvah.
        BarMitzvah = "{http://gedcomx.org/}BarMitzvah"

        #  A fact of a person's bat mitzvah.
        BatMitzvah = "{http://gedcomx.org/}BatMitzvah"

        #  A fact of a person's birth.
        Birth = "{http://gedcomx.org/}Birth"

        #  A fact of an official blessing received by a person, such as at the hands of a clergy member or at another religious rite.
        Blessing = "{http://gedcomx.org/}Blessing"

        #  A fact of the burial of person's body after death.
        Burial = "{http://gedcomx.org/}Burial"

        #  A fact of a person's caste.
        Caste = "{http://gedcomx.org/}Caste"

        #  A fact of a person's participation in a census.
        Census = "{http://gedcomx.org/}Census"

        #  A fact of a person's christening *at birth*. Note: use `AdultChristening` for the christening as an adult.
        Christening = "{http://gedcomx.org/}Christening"

        #  A fact of a person's circumcision.
        Circumcision = "{http://gedcomx.org/}Circumcision"

        #  A fact of a person's clan.
        Clan = "{http://gedcomx.org/}Clan"

        #  A fact of a person's confirmation (or other rite of initiation) in a church or religion.
        Confirmation = "{http://gedcomx.org/}Confirmation"

        #  A fact of the cremation of person's body after death.
        Cremation = "{http://gedcomx.org/}Cremation"

        #  A fact of the death of a person.
        Death = "{http://gedcomx.org/}Death"

        #  A fact of an education or an educational achievement (e.g. diploma, graduation, scholarship, etc.) of a person.
        Education = "{http://gedcomx.org/}Education"

        #  A fact of the emigration of a person.
        Emigration = "{http://gedcomx.org/}Emigration"

        #  A fact of a person's ethnicity or race.
        Ethnicity = "{http://gedcomx.org/}Ethnicity"

        #  A fact of a person's excommunication from a church.
        Excommunication = "{http://gedcomx.org/}Excommunication"

        #  A fact of a person's first communion in a church.
        FirstCommunion = "{http://gedcomx.org/}FirstCommunion"

        #  A fact of a person's funeral.
        Funeral = "{http://gedcomx.org/}Funeral"

        #  A fact of a person's immigration.
        Immigration = "{http://gedcomx.org/}Immigration"

        #  A fact of a person's imprisonment.
        Imprisonment = "{http://gedcomx.org/}Imprisonment"

        #  A fact of a land transaction enacted by a person.
        LandTransation = "{http://gedcomx.org/}LandTransation"

        #  A fact of a record of a person's living for a specific period. This is designed to include &quot;flourish&quot;, defined to mean the time period
        #  in an adult's life where he was most productive, perhaps as a writer or member of the state assembly. It does not reflect the person's birth and death dates.
        Living = "{http://gedcomx.org/}Living"

        #  A fact of a person's marital status.
        MaritalStatus = "{http://gedcomx.org/}MaritalStatus"

        #  A fact of a person's medical record, such as for an illness or hospital stay.
        Medical = "{http://gedcomx.org/}Medical"

        #  A fact of a person's military award.
        MilitaryAward = "{http://gedcomx.org/}MilitaryAward"

        #  A fact of a person's military discharge.
        MilitaryDischarge = "{http://gedcomx.org/}MilitaryDischarge"

        #  A fact of a person's militray service.
        MilitaryService = "{http://gedcomx.org/}MilitaryService"

        #  A fact of a person's church mission.
        Mission = "{http://gedcomx.org/}Mission"

        #  A fact of a person's move (i.e. change of residence) from a location.
        MoveFrom = "{http://gedcomx.org/}MoveFrom"

        #  A fact of a person's move (i.e. change of residence) to a new location.
        MoveTo = "{http://gedcomx.org/}MoveTo"

        #  A fact that a person was born as part of a multiple birth (e.g. twin, triplet, etc.)
        MultipleBirth = "{http://gedcomx.org/}MultipleBirth"

        #  A fact of a person's national id (e.g. social security number).
        NationalId = "{http://gedcomx.org/}NationalId"

        #  A fact of a person's nationality.
        Nationality = "{http://gedcomx.org/}Nationality"

        #  A fact of a person's naturalization (i.e. acquisition of citizenship and nationality).
        Naturalization = "{http://gedcomx.org/}Naturalization"

        #  A fact of a person's number of marriages.
        NumberOfMarriages = "{http://gedcomx.org/}NumberOfMarriages"

        #  A fact of a person's occupation or employment.
        Occupation = "{http://gedcomx.org/}Occupation"

        #  A fact of a person's ordination to a stewardship in a church.
        Ordination = "{http://gedcomx.org/}Ordination"

        #  A fact of a person's physical description.
        PhysicalDescription = "{http://gedcomx.org/}PhysicalDescription"

        #  A fact of a receipt of probate of a person's property.
        Probate = "{http://gedcomx.org/}Probate"

        #  A fact of a person's property or possessions.
        Property = "{http://gedcomx.org/}Property"

        #  A fact of a person's religion.
        Religion = "{http://gedcomx.org/}Religion"

        #  A fact of a person's residence.
        Residence = "{http://gedcomx.org/}Residence"

        #  A fact of a person's retirement.
        Retirement = "{http://gedcomx.org/}Retirement"

        #  A fact of a person's stillbirth.
        Stillbirth = "{http://gedcomx.org/}Stillbirth"

        #  A fact of a person's will.
        Will = "{http://gedcomx.org/}Will"

        #  A fact of a person's visit to a place different from the person's residence.
        Visit = "{http://gedcomx.org/}Visit"

        #  The fact of an annulment of a marriage.
        Annulment = "{http://gedcomx.org/}Annulment"

        #  The fact of a marriage by common law.
        CommonLawMarriage = "{http://gedcomx.org/}CommonLawMarriage"

        #  The fact of a divorce of a couple.
        Divorce = "{http://gedcomx.org/}Divorce"

        #  The fact of a filing for divorce.
        DivorceFiling = "{http://gedcomx.org/}DivorceFiling"

        #  The fact of an engagement to be married.
        Engagement = "{http://gedcomx.org/}Engagement"

        #  The fact of a marriage.
        Marriage = "{http://gedcomx.org/}Marriage"

        #  The fact of a marriage banns.
        MarriageBanns = "{http://gedcomx.org/}MarriageBanns"

        #  The fact of a marriage contract.
        MarriageContract = "{http://gedcomx.org/}MarriageContract"

        #  The fact of a marriage license.
        MarriageLicense = "{http://gedcomx.org/}MarriageLicense"

        #  The fact of a marriage notice.
        MarriageNotice = "{http://gedcomx.org/}MarriageNotice"

        #  A fact of the number of children of a person or relationship.
        NumberOfChildren = "{http://gedcomx.org/}NumberOfChildren"

        #  A fact of a couple's separation.
        Separation = "{http://gedcomx.org/}Separation"

        #  A fact about an adoptive relationship between a parent an a child.
        AdoptiveParent = "{http://gedcomx.org/}AdoptiveParent"

        #  A fact the biological relationship between a parent and a child.
        BiologicalParent = "{http://gedcomx.org/}BiologicalParent"

        #  A fact about a foster relationship between a foster parent and a child.
        FosterParent = "{http://gedcomx.org/}FosterParent"

        #  A fact about a legal guardianship between a parent and a child.
        GuardianParent = "{http://gedcomx.org/}GuardianParent"

        #  A fact about the step relationship between a parent and a child.
        StepParent = "{http://gedcomx.org/}StepParent"

        #  A fact about a sociological relationship between a parent and a child, but not definable in typical legal or biological terms.
        SociologicalParent = "{http://gedcomx.org/}SociologicalParent"
      end

    end

  end

end

module Org

  module Gedcomx

    module Types

      # Enumeration of known facet types.
      class FacetType

        #  A year.
        Year = "{http://gedcomx.org/}Year"

        #  A (geographic) state.
        State = "{http://gedcomx.org/}State"

        #  A province.
        Province = "{http://gedcomx.org/}Province"

        #  A country.
        Country = "{http://gedcomx.org/}Country"

        #  A city.
        City = "{http://gedcomx.org/}City"

        #  A parish
        Parish = "{http://gedcomx.org/}Parish"

        #  A township.
        Township = "{http://gedcomx.org/}Township"

        #  A page.
        Page = "{http://gedcomx.org/}Page"

        #  A volume.
        Volume = "{http://gedcomx.org/}Volume"

        #  A date.
        Date = "{http://gedcomx.org/}Date"

        #  A place.
        Place = "{http://gedcomx.org/}Place"

        #  A name.
        Name = "{http://gedcomx.org/}Name"

        #  A gender.
        Gender = "{http://gedcomx.org/}Gender"
      end

    end

  end

end

module Org

  module Gedcomx

    module Types

      # Enumeration of standard event roles.
      class EventRoleType

        # (no documentation provided)
        Principal = "{http://gedcomx.org/}Principal"

        # (no documentation provided)
        Participant = "{http://gedcomx.org/}Participant"

        # (no documentation provided)
        Official = "{http://gedcomx.org/}Official"

        # (no documentation provided)
        Witness = "{http://gedcomx.org/}Witness"
      end

    end

  end

end

module Org

  module Gedcomx

    module Types

      # Enumeration of document types.
      class DocumentType

        #  The document is an abstract of a record or document.
        Abstract = "{http://gedcomx.org/}Abstract"

        #  The document is a translation of a record or document.
        Translation = "{http://gedcomx.org/}Translation"

        #  The document is a transcription (full or partial) of a record or document.
        Transcription = "{http://gedcomx.org/}Transcription"

        #  The document is an analysis done by a researcher, often used as a genealogical proof statement.
        Analysis = "{http://gedcomx.org/}Analysis"
      end

    end

  end

end

module Org

  module Gedcomx

    module Types

      # Enumeration of levels of confidence.
      class ConfidenceLevel

        #  High of confidence.
        High = "{http://gedcomx.org/}High"

        #  Medium of confidence.
        Medium = "{http://gedcomx.org/}Medium"

        #  Low of confidence.
        Low = "{http://gedcomx.org/}Low"
      end

    end

  end

end

module Org

  module Gedcomx

    module Agent

      # An online account for a web application.
      class OnlineAccount < Org::Gedcomx::Common::ExtensibleData

        # The name associated the holder of this account with the account.
        attr_accessor :accountName
        # The homepage of the service that provides this account.
        attr_accessor :serviceHomepage

        # the json hash for this OnlineAccount
        def to_jaxb_json_hash
          _h = super
          _h['accountName'] = accountName.to_jaxb_json_hash unless accountName.nil?
          _h['serviceHomepage'] = serviceHomepage.to_jaxb_json_hash unless serviceHomepage.nil?
          return _h
        end

        #initializes this OnlineAccount with a json hash
        def init_jaxb_json_hash(_o)
          super _o
          @accountName = String.from_json(_o['accountName']) unless _o['accountName'].nil?
          @serviceHomepage = Org::Gedcomx::Common::ResourceReference.from_json(_o['serviceHomepage']) unless _o['serviceHomepage'].nil?
        end

        # constructs a OnlineAccount from a (parsed) JSON hash
        def self.from_json(o)
          if o.nil?
            return nil
          else
            inst = new
            inst.init_jaxb_json_hash o
            return inst
          end
        end
      end

    end

  end

end

module Org

  module Gedcomx

    module Conclusion

      # A concluded genealogical date.
      class DateInfo < Org::Gedcomx::Common::ExtensibleData

        # The original text as supplied by the user.
        attr_accessor :original
        # The formal value.
        attr_accessor :formal
        # The list of normalized values for the date, provided for display purposes by the application. Normalized values
        # are not specified by GEDCOM X core, but as extension elements by GEDCOM X RS.
        attr_accessor :normalizedExtensions
        # The references to the record field values being used as evidence.
        attr_accessor :fieldValueReferences

        # the json hash for this DateInfo
        def to_jaxb_json_hash
          _h = super
          _h['original'] = original.to_jaxb_json_hash unless original.nil?
          _h['formal'] = formal.to_jaxb_json_hash unless formal.nil?
          if !normalizedExtensions.nil?
            _ha = Array.new
            normalizedExtensions.each { | _item | _ha.push _item.to_jaxb_json_hash }
            _h['normalized'] = _ha
          end
          if !fieldValueReferences.nil?
            _ha = Array.new
            fieldValueReferences.each { | _item | _ha.push _item.to_jaxb_json_hash }
            _h['fieldValues'] = _ha
          end
          return _h
        end

        #initializes this DateInfo with a json hash
        def init_jaxb_json_hash(_o)
          super _o
          @original = String.from_json(_o['original']) unless _o['original'].nil?
          @formal = String.from_json(_o['formal']) unless _o['formal'].nil?
          if !_o['normalized'].nil?
            @normalizedExtensions = Array.new
            _oa = _o['normalized']
            _oa.each { | _item | @normalizedExtensions.push Org::Gedcomx::Common::TextValue.from_json(_item) }
          end
          if !_o['fieldValues'].nil?
            @fieldValueReferences = Array.new
            _oa = _o['fieldValues']
            _oa.each { | _item | @fieldValueReferences.push Org::Gedcomx::Common::EvidenceReference.from_json(_item) }
          end
        end

        # constructs a DateInfo from a (parsed) JSON hash
        def self.from_json(o)
          if o.nil?
            return nil
          else
            inst = new
            inst.init_jaxb_json_hash o
            return inst
          end
        end
      end

    end

  end

end

module Org

  module Gedcomx

    module Conclusion

      # A form of a name.
      class NameForm < Org::Gedcomx::Common::ExtensibleData

        # The language of the conclusion.
        attr_accessor :lang
        # The full text of the name form.
        attr_accessor :fullText
        # The different parts of the name form.
        attr_accessor :parts
        # The references to the record field values being used as evidence.
        attr_accessor :fieldValueReferences

        # the json hash for this NameForm
        def to_jaxb_json_hash
          _h = super
          _h['lang'] = lang.to_jaxb_json_hash unless lang.nil?
          _h['fullText'] = fullText.to_jaxb_json_hash unless fullText.nil?
          if !parts.nil?
            _ha = Array.new
            parts.each { | _item | _ha.push _item.to_jaxb_json_hash }
            _h['parts'] = _ha
          end
          if !fieldValueReferences.nil?
            _ha = Array.new
            fieldValueReferences.each { | _item | _ha.push _item.to_jaxb_json_hash }
            _h['fieldValues'] = _ha
          end
          return _h
        end

        #initializes this NameForm with a json hash
        def init_jaxb_json_hash(_o)
          super _o
          @lang = String.from_json(_o['lang']) unless _o['lang'].nil?
          @fullText = String.from_json(_o['fullText']) unless _o['fullText'].nil?
          if !_o['parts'].nil?
            @parts = Array.new
            _oa = _o['parts']
            _oa.each { | _item | @parts.push Org::Gedcomx::Conclusion::NamePart.from_json(_item) }
          end
          if !_o['fieldValues'].nil?
            @fieldValueReferences = Array.new
            _oa = _o['fieldValues']
            _oa.each { | _item | @fieldValueReferences.push Org::Gedcomx::Common::EvidenceReference.from_json(_item) }
          end
        end

        # constructs a NameForm from a (parsed) JSON hash
        def self.from_json(o)
          if o.nil?
            return nil
          else
            inst = new
            inst.init_jaxb_json_hash o
            return inst
          end
        end
      end

    end

  end

end

module Org

  module Gedcomx

    module Conclusion

      # A set of display properties for the convenience of quick display, such as for
      # a Web-based application. All display properties are provided in the default locale for the current
      # application context and are NOT considered canonical for the purposes of data exchange.
      class DisplayProperties < Org::Gedcomx::Common::ExtensibleData

        # The context-specific ascendancy number for the person in relation to the other persons in the request. The ancestry number is defined using the Ahnentafel numbering system.
        attr_accessor :ascendancyNumber
        # The displayable label for the birth date of the person.
        attr_accessor :birthDate
        # The displayable label for the birth place of the person.
        attr_accessor :birthPlace
        # The displayable label for the death date of the person.
        attr_accessor :deathDate
        # The displayable label for the death place of the person.
        attr_accessor :deathPlace
        # The context-specific descendancy number for the person in relation to the other persons in the request. The descendancy number is defined using the d'Aboville numbering system.
        attr_accessor :descendancyNumber
        # The displayable label for the gender of the person.
        attr_accessor :gender
        # The displayable label for the lifespan of the person.
        attr_accessor :lifespan
        # The displayable name of the person.
        attr_accessor :name

        # the json hash for this DisplayProperties
        def to_jaxb_json_hash
          _h = super
          _h['ascendancyNumber'] = ascendancyNumber.to_jaxb_json_hash unless ascendancyNumber.nil?
          _h['birthDate'] = birthDate.to_jaxb_json_hash unless birthDate.nil?
          _h['birthPlace'] = birthPlace.to_jaxb_json_hash unless birthPlace.nil?
          _h['deathDate'] = deathDate.to_jaxb_json_hash unless deathDate.nil?
          _h['deathPlace'] = deathPlace.to_jaxb_json_hash unless deathPlace.nil?
          _h['descendancyNumber'] = descendancyNumber.to_jaxb_json_hash unless descendancyNumber.nil?
          _h['gender'] = gender.to_jaxb_json_hash unless gender.nil?
          _h['lifespan'] = lifespan.to_jaxb_json_hash unless lifespan.nil?
          _h['name'] = name.to_jaxb_json_hash unless name.nil?
          return _h
        end

        #initializes this DisplayProperties with a json hash
        def init_jaxb_json_hash(_o)
          super _o
          @ascendancyNumber = String.from_json(_o['ascendancyNumber']) unless _o['ascendancyNumber'].nil?
          @birthDate = String.from_json(_o['birthDate']) unless _o['birthDate'].nil?
          @birthPlace = String.from_json(_o['birthPlace']) unless _o['birthPlace'].nil?
          @deathDate = String.from_json(_o['deathDate']) unless _o['deathDate'].nil?
          @deathPlace = String.from_json(_o['deathPlace']) unless _o['deathPlace'].nil?
          @descendancyNumber = String.from_json(_o['descendancyNumber']) unless _o['descendancyNumber'].nil?
          @gender = String.from_json(_o['gender']) unless _o['gender'].nil?
          @lifespan = String.from_json(_o['lifespan']) unless _o['lifespan'].nil?
          @name = String.from_json(_o['name']) unless _o['name'].nil?
        end

        # constructs a DisplayProperties from a (parsed) JSON hash
        def self.from_json(o)
          if o.nil?
            return nil
          else
            inst = new
            inst.init_jaxb_json_hash o
            return inst
          end
        end
      end

    end

  end

end

module Org

  module Gedcomx

    module Common

      # Attribution for genealogical information. Attribution is used to model <strong>who</strong> is contributing/modifying
      # information, <strong>when</strong> they contributed it, and <strong>why</strong> they are making the
      # contribution/modification.
      class Attribution < Org::Gedcomx::Common::ExtensibleData

        # Reference to the contributor of the attributed data.
        attr_accessor :contributor
        # The modified timestamp for the attributed data.
        attr_accessor :modified
        # The &quot;change message&quot; for the attributed data provided by the contributor.
        attr_accessor :changeMessage

        # the json hash for this Attribution
        def to_jaxb_json_hash
          _h = super
          _h['contributor'] = contributor.to_jaxb_json_hash unless contributor.nil?
          _h['modified'] = modified.to_jaxb_json_hash unless modified.nil?
          _h['changeMessage'] = changeMessage.to_jaxb_json_hash unless changeMessage.nil?
          return _h
        end

        #initializes this Attribution with a json hash
        def init_jaxb_json_hash(_o)
          super _o
          @contributor = Org::Gedcomx::Common::ResourceReference.from_json(_o['contributor']) unless _o['contributor'].nil?
          @modified = Time.from_json(_o['modified']) unless _o['modified'].nil?
          @changeMessage = String.from_json(_o['changeMessage']) unless _o['changeMessage'].nil?
        end

        # constructs a Attribution from a (parsed) JSON hash
        def self.from_json(o)
          if o.nil?
            return nil
          else
            inst = new
            inst.init_jaxb_json_hash o
            return inst
          end
        end
      end

    end

  end

end

module Org

  module Gedcomx

    module Conclusion

      # A part of a name.
      class NamePart < Org::Gedcomx::Common::ExtensibleData

        # The value of the name part.
        attr_accessor :value
        # The type of the name part.
        attr_accessor :type
        # The references to the record field values being used as evidence.
        attr_accessor :fieldValueReferences
        # The qualifiers associated with this name part.
        attr_accessor :qualifiers

        # the json hash for this NamePart
        def to_jaxb_json_hash
          _h = super
          _h['value'] = value.to_jaxb_json_hash unless value.nil?
          _h['type'] = type.to_jaxb_json_hash unless type.nil?
          if !fieldValueReferences.nil?
            _ha = Array.new
            fieldValueReferences.each { | _item | _ha.push _item.to_jaxb_json_hash }
            _h['fieldValues'] = _ha
          end
          if !qualifiers.nil?
            _ha = Array.new
            qualifiers.each { | _item | _ha.push _item.to_jaxb_json_hash }
            _h['qualifiers'] = _ha
          end
          return _h
        end

        #initializes this NamePart with a json hash
        def init_jaxb_json_hash(_o)
          super _o
          @value = String.from_json(_o['value']) unless _o['value'].nil?
          @type = String.from_json(_o['type']) unless _o['type'].nil?
          if !_o['fieldValues'].nil?
            @fieldValueReferences = Array.new
            _oa = _o['fieldValues']
            _oa.each { | _item | @fieldValueReferences.push Org::Gedcomx::Common::EvidenceReference.from_json(_item) }
          end
          if !_o['qualifiers'].nil?
            @qualifiers = Array.new
            _oa = _o['qualifiers']
            _oa.each { | _item | @qualifiers.push Org::Gedcomx::Common::Qualifier.from_json(_item) }
          end
        end

        # constructs a NamePart from a (parsed) JSON hash
        def self.from_json(o)
          if o.nil?
            return nil
          else
            inst = new
            inst.init_jaxb_json_hash o
            return inst
          end
        end
      end

    end

  end

end

module Org

  module Gedcomx

    module Types

      # Enumeration of standard identifier types.
      class IdentifierType

        #  The primary identifier for the resource.
        Primary = "{http://gedcomx.org/}Primary"

        #  An identifier for the evidence that supports the resource. For example, when a conclusion
        #  about a person is extracted, analyzed and evaluated atomically within the context of a
        #  single source, it takes the form of a (extracted) person conclusion, and the extracted conclusion
        #  may supply an identifier for the person. As all evidence for the person is gathered, the
        #  (working) person conclusion identifies the evidence used to support the conclusion by including
        #  each evidence identifier in the list of identifiers for the person.
        Evidence = "{http://gedcomx.org/}Evidence"

        #  An identifier that has been relegated, deprecated, or otherwise downgraded. This
        #  identifier is commonly used as the result of a merge when what was once a primary
        #  identifier for a person is no longer primary.
        Deprecated = "{http://gedcomx.org/}Deprecated"

        #  An identifier that is considered to be a long-term persistent identifier. Applications
        #  that provide persistent identifiers are claiming that links to the resource using the identifier
        #  won't break.
        Persistent = "{http://gedcomx.org/}Persistent"
      end

    end

  end

end

module Org

  module Gedcomx

    module Types

      # Enumeration of standard name types.
      class NameType

        #  Name given at birth.
        BirthName = "{http://gedcomx.org/}BirthName"

        #  Name used at the time of death.
        DeathName = "{http://gedcomx.org/}DeathName"

        #  Name accepted at marriage.
        MarriedName = "{http://gedcomx.org/}MarriedName"

        #  &quot;Also known as&quot; name.
        AlsoKnownAs = "{http://gedcomx.org/}AlsoKnownAs"

        #  Nickname.
        Nickname = "{http://gedcomx.org/}Nickname"

        #  Name given at adoption.
        AdoptiveName = "{http://gedcomx.org/}AdoptiveName"

        #  A formal name, usually given to distinguish it from a name more commonly used.
        FormalName = "{http://gedcomx.org/}FormalName"

        #  A name given at a religious rite or ceremony.
        ReligiousName = "{http://gedcomx.org/}ReligiousName"
      end

    end

  end

end

module Org

  module Gedcomx

    module Types

      # Enumeration of standard relationship types.
      class RelationshipType

        # (no documentation provided)
        Couple = "{http://gedcomx.org/}Couple"

        # (no documentation provided)
        ParentChild = "{http://gedcomx.org/}ParentChild"
      end

    end

  end

end

module Org

  module Gedcomx

    module Types

      # Enumeration of high-level genealogical resource types.
      class ResourceType

        #  A historical record.
        Record = "{http://gedcomx.org/}Record"

        #  A collection.
        Collection = "{http://gedcomx.org/}Collection"

        #  A digital artifact, such as a digital image or video.
        DigitalArtifact = "{http://gedcomx.org/}DigitalArtifact"

        #  A physical artifact.
        PhysicalArtifact = "{http://gedcomx.org/}PhysicalArtifact"

        #  A person.
        Person = "{http://gedcomx.org/}Person"
      end

    end

  end

end

module Org

  module Gedcomx

    module Types

      # Enumeration of known record types.
      class RecordType

        #  A record of a person's admission to an institution, society, or other association.
        Admission = "{http://gedcomx.org/}Admission"

        #  A record of an adoption.
        Adoption = "{http://gedcomx.org/}Adoption"

        #  An affidavit.
        Affidavit = "{http://gedcomx.org/}Affidavit"

        #  A person's application to an institution, society or other association.
        Application = "{http://gedcomx.org/}Application"

        #  A record of a person's arrival at a certain place.
        Arrival = "{http://gedcomx.org/}Arrival"

        #  A record of a person's baptism.
        Baptism = "{http://gedcomx.org/}Baptism"

        #  A record of a birth.
        Birth = "{http://gedcomx.org/}Birth"

        #  A record of a person's burial or interment.
        Burial = "{http://gedcomx.org/}Burial"

        #  todo: document this type.
        Business = "{http://gedcomx.org/}Business"

        #  todo: document this type.
        Cemetery = "{http://gedcomx.org/}Cemetery"

        #  A census record.
        Census = "{http://gedcomx.org/}Census"

        #  A record of a person's christening.
        Christening = "{http://gedcomx.org/}Christening"

        #  A record of a person's confirmation.
        Confirmation = "{http://gedcomx.org/}Confirmation"

        #  todo: document this type.
        Correspondence = "{http://gedcomx.org/}Correspondence"

        #  A death record.
        Death = "{http://gedcomx.org/}Death"

        #  A record of a person's departure from a certain place.
        Departure = "{http://gedcomx.org/}Departure"

        #  A divorce record.
        Divorce = "{http://gedcomx.org/}Divorce"

        #  todo: document this type.
        Duplicate = "{http://gedcomx.org/}Duplicate"

        #  todo: document this type.
        Estate = "{http://gedcomx.org/}Estate"

        #  todo: document this type.
        Index = "{http://gedcomx.org/}Index"

        #  todo: document this type. what's the difference between this an MarrigeBanns?
        IntendedMarriage = "{http://gedcomx.org/}IntendedMarriage"

        #  A marriage record.
        Marriage = "{http://gedcomx.org/}Marriage"

        #  A marriage affadavit. todo: is this distinguishment necessary? why not just use Marriage?
        MarriageAffidavits = "{http://gedcomx.org/}MarriageAffidavits"

        #  todo: document this type.
        MarriageAmendment = "{http://gedcomx.org/}MarriageAmendment"

        #  A record of a person's banns of marriage.
        MarriageBanns = "{http://gedcomx.org/}MarriageBanns"

        #  todo: document this type. why not just use marriage banns?
        MarriageConsent = "{http://gedcomx.org/}MarriageConsent"

        #  todo: document this type.
        MarriageDuplicate = "{http://gedcomx.org/}MarriageDuplicate"

        #  A marriage license. todo: is this distinguishment necessary? why not just use Marriage?
        MarriageLicense = "{http://gedcomx.org/}MarriageLicense"

        #  todo: document this type. is this distinguishment necessary? why not just use Marriage?
        MarriageReturns = "{http://gedcomx.org/}MarriageReturns"

        #  todo: document this type. is this distinguishment necessary?
        Membership = "{http://gedcomx.org/}Membership"

        #  A migration record.
        Migration = "{http://gedcomx.org/}Migration"

        #  A military record.
        Military = "{http://gedcomx.org/}Military"

        #  A naturalization record.
        Naturalization = "{http://gedcomx.org/}Naturalization"

        #  A passenger record.
        Passenger = "{http://gedcomx.org/}Passenger"

        #  A pension record.
        Pension = "{http://gedcomx.org/}Pension"

        #  todo: document this type.
        RelatedDocument = "{http://gedcomx.org/}RelatedDocument"

        #  todo: document this type.
        ReligiousCreeds = "{http://gedcomx.org/}ReligiousCreeds"

        #  A tax record.
        Tax = "{http://gedcomx.org/}Tax"
      end

    end

  end

end

module Org

  module Gedcomx

    module Types

      # Enumeration of standard name part types.
      class NamePartType

        # (no documentation provided)
        Prefix = "{http://gedcomx.org/}Prefix"

        # (no documentation provided)
        Suffix = "{http://gedcomx.org/}Suffix"

        # (no documentation provided)
        Given = "{http://gedcomx.org/}Given"

        # (no documentation provided)
        Surname = "{http://gedcomx.org/}Surname"
      end

    end

  end

end

module Org

  module Gedcomx

    module Agent

      # An address.
      class Address < Org::Gedcomx::Common::ExtensibleData

        # The city.
        attr_accessor :city
        # The country.
        attr_accessor :country
        # The postal code.
        attr_accessor :postalCode
        # The state or province.
        attr_accessor :stateOrProvince
        # The street.
        attr_accessor :street
        # Additional street information.
        attr_accessor :street2
        # Additional street information.
        attr_accessor :street3
        # The value of the property.
        attr_accessor :value

        # the json hash for this Address
        def to_jaxb_json_hash
          _h = super
          _h['city'] = city.to_jaxb_json_hash unless city.nil?
          _h['country'] = country.to_jaxb_json_hash unless country.nil?
          _h['postalCode'] = postalCode.to_jaxb_json_hash unless postalCode.nil?
          _h['stateOrProvince'] = stateOrProvince.to_jaxb_json_hash unless stateOrProvince.nil?
          _h['street'] = street.to_jaxb_json_hash unless street.nil?
          _h['street2'] = street2.to_jaxb_json_hash unless street2.nil?
          _h['street3'] = street3.to_jaxb_json_hash unless street3.nil?
          _h['value'] = value.to_jaxb_json_hash unless value.nil?
          return _h
        end

        #initializes this Address with a json hash
        def init_jaxb_json_hash(_o)
          super _o
          @city = String.from_json(_o['city']) unless _o['city'].nil?
          @country = String.from_json(_o['country']) unless _o['country'].nil?
          @postalCode = String.from_json(_o['postalCode']) unless _o['postalCode'].nil?
          @stateOrProvince = String.from_json(_o['stateOrProvince']) unless _o['stateOrProvince'].nil?
          @street = String.from_json(_o['street']) unless _o['street'].nil?
          @street2 = String.from_json(_o['street2']) unless _o['street2'].nil?
          @street3 = String.from_json(_o['street3']) unless _o['street3'].nil?
          @value = String.from_json(_o['value']) unless _o['value'].nil?
        end

        # constructs a Address from a (parsed) JSON hash
        def self.from_json(o)
          if o.nil?
            return nil
          else
            inst = new
            inst.init_jaxb_json_hash o
            return inst
          end
        end
      end

    end

  end

end

module Org

  module Gedcomx

    module Records

      # <p>A <tt>facet</tt> is a logical grouping of resources by specific criteria, used for convenience in browsing a collection or a set of search results.</p>
      class Facet < Org::Gedcomx::Links::HypermediaEnabledData

        # The type of the facet.
        attr_accessor :type
        # A title for the facet.
        attr_accessor :title
        # A key unique within the context of this facet, used to apply the facet.
        attr_accessor :key
        # The set of sub-facets of this facet.
        attr_accessor :facets
        # The set of values for the field.
        attr_accessor :values

        # the json hash for this Facet
        def to_jaxb_json_hash
          _h = super
          _h['type'] = type.to_jaxb_json_hash unless type.nil?
          _h['title'] = title.to_jaxb_json_hash unless title.nil?
          _h['key'] = key.to_jaxb_json_hash unless key.nil?
          if !facets.nil?
            _ha = Array.new
            facets.each { | _item | _ha.push _item.to_jaxb_json_hash }
            _h['facets'] = _ha
          end
          if !values.nil?
            _ha = Array.new
            values.each { | _item | _ha.push _item.to_jaxb_json_hash }
            _h['values'] = _ha
          end
          return _h
        end

        #initializes this Facet with a json hash
        def init_jaxb_json_hash(_o)
          super _o
          @type = String.from_json(_o['type']) unless _o['type'].nil?
          @title = String.from_json(_o['title']) unless _o['title'].nil?
          @key = String.from_json(_o['key']) unless _o['key'].nil?
          if !_o['facets'].nil?
            @facets = Array.new
            _oa = _o['facets']
            _oa.each { | _item | @facets.push Org::Gedcomx::Records::Facet.from_json(_item) }
          end
          if !_o['values'].nil?
            @values = Array.new
            _oa = _o['values']
            _oa.each { | _item | @values.push Org::Gedcomx::Records::FacetValue.from_json(_item) }
          end
        end

        # constructs a Facet from a (parsed) JSON hash
        def self.from_json(o)
          if o.nil?
            return nil
          else
            inst = new
            inst.init_jaxb_json_hash o
            return inst
          end
        end
      end

    end

  end

end

module Org

  module Gedcomx

    module Records

      # A field of a record.
      class Field < Org::Gedcomx::Links::HypermediaEnabledData

        # The type of the gender.
        attr_accessor :type
        # A unique label for the field.
        attr_accessor :label
        # The set of values for the field.
        attr_accessor :values

        # the json hash for this Field
        def to_jaxb_json_hash
          _h = super
          _h['type'] = type.to_jaxb_json_hash unless type.nil?
          _h['label'] = label.to_jaxb_json_hash unless label.nil?
          if !values.nil?
            _ha = Array.new
            values.each { | _item | _ha.push _item.to_jaxb_json_hash }
            _h['values'] = _ha
          end
          return _h
        end

        #initializes this Field with a json hash
        def init_jaxb_json_hash(_o)
          super _o
          @type = String.from_json(_o['type']) unless _o['type'].nil?
          @label = String.from_json(_o['label']) unless _o['label'].nil?
          if !_o['values'].nil?
            @values = Array.new
            _oa = _o['values']
            _oa.each { | _item | @values.push Org::Gedcomx::Records::FieldValue.from_json(_item) }
          end
        end

        # constructs a Field from a (parsed) JSON hash
        def self.from_json(o)
          if o.nil?
            return nil
          else
            inst = new
            inst.init_jaxb_json_hash o
            return inst
          end
        end
      end

    end

  end

end

module Org

  module Gedcomx

    module Source

      # Represents a source citation.
      class SourceCitation < Org::Gedcomx::Links::HypermediaEnabledData

        # The language of the note.
        attr_accessor :lang
        # A reference to the citation template for this citation.
        attr_accessor :citationTemplate
        # The list of citation fields.
        attr_accessor :fields
        # A rendering (as a string) of a source citation.  This rendering should be the most complete rendering available.
        attr_accessor :value

        # the json hash for this SourceCitation
        def to_jaxb_json_hash
          _h = super
          _h['lang'] = lang.to_jaxb_json_hash unless lang.nil?
          _h['citationTemplate'] = citationTemplate.to_jaxb_json_hash unless citationTemplate.nil?
          if !fields.nil?
            _ha = Array.new
            fields.each { | _item | _ha.push _item.to_jaxb_json_hash }
            _h['fields'] = _ha
          end
          _h['value'] = value.to_jaxb_json_hash unless value.nil?
          return _h
        end

        #initializes this SourceCitation with a json hash
        def init_jaxb_json_hash(_o)
          super _o
          @lang = String.from_json(_o['lang']) unless _o['lang'].nil?
          @citationTemplate = Org::Gedcomx::Common::ResourceReference.from_json(_o['citationTemplate']) unless _o['citationTemplate'].nil?
          if !_o['fields'].nil?
            @fields = Array.new
            _oa = _o['fields']
            _oa.each { | _item | @fields.push Org::Gedcomx::Source::CitationField.from_json(_item) }
          end
          @value = String.from_json(_o['value']) unless _o['value'].nil?
        end

        # constructs a SourceCitation from a (parsed) JSON hash
        def self.from_json(o)
          if o.nil?
            return nil
          else
            inst = new
            inst.init_jaxb_json_hash o
            return inst
          end
        end
      end

    end

  end

end

module Org

  module Gedcomx

    module Source

      # An attributable reference to a description of a source.
      class SourceReference < Org::Gedcomx::Links::HypermediaEnabledData

        # A reference to a description of the source being referenced.
        attr_accessor :descriptionRef
        # The URI to the source, or a fragment of the source.
        attr_accessor :resource
        # The attribution metadata for this source reference.
        attr_accessor :attribution
        # The qualifiers associated with this source reference.
        attr_accessor :qualifiers

        # the json hash for this SourceReference
        def to_jaxb_json_hash
          _h = super
          _h['description'] = descriptionRef.to_jaxb_json_hash unless descriptionRef.nil?
          _h['resource'] = resource.to_jaxb_json_hash unless resource.nil?
          _h['attribution'] = attribution.to_jaxb_json_hash unless attribution.nil?
          if !qualifiers.nil?
            _ha = Array.new
            qualifiers.each { | _item | _ha.push _item.to_jaxb_json_hash }
            _h['qualifiers'] = _ha
          end
          return _h
        end

        #initializes this SourceReference with a json hash
        def init_jaxb_json_hash(_o)
          super _o
          @descriptionRef = String.from_json(_o['description']) unless _o['description'].nil?
          @resource = String.from_json(_o['resource']) unless _o['resource'].nil?
          @attribution = Org::Gedcomx::Common::Attribution.from_json(_o['attribution']) unless _o['attribution'].nil?
          if !_o['qualifiers'].nil?
            @qualifiers = Array.new
            _oa = _o['qualifiers']
            _oa.each { | _item | @qualifiers.push Org::Gedcomx::Common::Qualifier.from_json(_item) }
          end
        end

        # constructs a SourceReference from a (parsed) JSON hash
        def self.from_json(o)
          if o.nil?
            return nil
          else
            inst = new
            inst.init_jaxb_json_hash o
            return inst
          end
        end
      end

    end

  end

end

module Org

  module Gedcomx

    module Source

      # Represents a description of a source.
      class SourceDescription < Org::Gedcomx::Links::HypermediaEnabledData

        # The URI (if applicable) of the actual source.
        attr_accessor :about
        # Hint about the media (MIME) type of the resource being described.
        attr_accessor :mediaType
        # The type of the resource being described.
        attr_accessor :resourceType
        # The bibliographic citations for this source.
        attr_accessor :citations
        # A reference to the entity that mediates access to the described source.
        attr_accessor :mediator
        # References to any sources to which this source is related (usually applicable to sources that are derived from or contained in another source).
        attr_accessor :sources
        # A reference to the analysis document explaining the analysis that went into this description of the source.
        attr_accessor :analysis
        # A reference to the source that contains this source.
        attr_accessor :componentOf
        # A list of titles for this source.
        attr_accessor :titles
        # Notes about a source.
        attr_accessor :notes
        # The attribution metadata for this source description.
        attr_accessor :attribution

        # the json hash for this SourceDescription
        def to_jaxb_json_hash
          _h = super
          _h['about'] = about.to_jaxb_json_hash unless about.nil?
          _h['mediaType'] = mediaType.to_jaxb_json_hash unless mediaType.nil?
          _h['resourceType'] = resourceType.to_jaxb_json_hash unless resourceType.nil?
          if !citations.nil?
            _ha = Array.new
            citations.each { | _item | _ha.push _item.to_jaxb_json_hash }
            _h['citations'] = _ha
          end
          _h['mediator'] = mediator.to_jaxb_json_hash unless mediator.nil?
          if !sources.nil?
            _ha = Array.new
            sources.each { | _item | _ha.push _item.to_jaxb_json_hash }
            _h['sources'] = _ha
          end
          _h['analysis'] = analysis.to_jaxb_json_hash unless analysis.nil?
          _h['componentOf'] = componentOf.to_jaxb_json_hash unless componentOf.nil?
          if !titles.nil?
            _ha = Array.new
            titles.each { | _item | _ha.push _item.to_jaxb_json_hash }
            _h['titles'] = _ha
          end
          if !notes.nil?
            _ha = Array.new
            notes.each { | _item | _ha.push _item.to_jaxb_json_hash }
            _h['notes'] = _ha
          end
          _h['attribution'] = attribution.to_jaxb_json_hash unless attribution.nil?
          return _h
        end

        #initializes this SourceDescription with a json hash
        def init_jaxb_json_hash(_o)
          super _o
          @about = String.from_json(_o['about']) unless _o['about'].nil?
          @mediaType = String.from_json(_o['mediaType']) unless _o['mediaType'].nil?
          @resourceType = String.from_json(_o['resourceType']) unless _o['resourceType'].nil?
          if !_o['citations'].nil?
            @citations = Array.new
            _oa = _o['citations']
            _oa.each { | _item | @citations.push Org::Gedcomx::Source::SourceCitation.from_json(_item) }
          end
          @mediator = Org::Gedcomx::Common::ResourceReference.from_json(_o['mediator']) unless _o['mediator'].nil?
          if !_o['sources'].nil?
            @sources = Array.new
            _oa = _o['sources']
            _oa.each { | _item | @sources.push Org::Gedcomx::Source::SourceReference.from_json(_item) }
          end
          @analysis = Org::Gedcomx::Common::ResourceReference.from_json(_o['analysis']) unless _o['analysis'].nil?
          @componentOf = Org::Gedcomx::Source::SourceReference.from_json(_o['componentOf']) unless _o['componentOf'].nil?
          if !_o['titles'].nil?
            @titles = Array.new
            _oa = _o['titles']
            _oa.each { | _item | @titles.push Org::Gedcomx::Common::TextValue.from_json(_item) }
          end
          if !_o['notes'].nil?
            @notes = Array.new
            _oa = _o['notes']
            _oa.each { | _item | @notes.push Org::Gedcomx::Common::Note.from_json(_item) }
          end
          @attribution = Org::Gedcomx::Common::Attribution.from_json(_o['attribution']) unless _o['attribution'].nil?
        end

        # constructs a SourceDescription from a (parsed) JSON hash
        def self.from_json(o)
          if o.nil?
            return nil
          else
            inst = new
            inst.init_jaxb_json_hash o
            return inst
          end
        end
      end

    end

  end

end

module Org

  module Gedcomx

    module Records

      # A descriptor for a common set of records.
      class RecordDescriptor < Org::Gedcomx::Links::HypermediaEnabledData

        # The language of this record description.
        attr_accessor :lang
        # The fields that are applicable to this record.
        attr_accessor :fields

        # the json hash for this RecordDescriptor
        def to_jaxb_json_hash
          _h = super
          _h['lang'] = lang.to_jaxb_json_hash unless lang.nil?
          if !fields.nil?
            _ha = Array.new
            fields.each { | _item | _ha.push _item.to_jaxb_json_hash }
            _h['fields'] = _ha
          end
          return _h
        end

        #initializes this RecordDescriptor with a json hash
        def init_jaxb_json_hash(_o)
          super _o
          @lang = String.from_json(_o['lang']) unless _o['lang'].nil?
          if !_o['fields'].nil?
            @fields = Array.new
            _oa = _o['fields']
            _oa.each { | _item | @fields.push Org::Gedcomx::Records::FieldDescriptor.from_json(_item) }
          end
        end

        # constructs a RecordDescriptor from a (parsed) JSON hash
        def self.from_json(o)
          if o.nil?
            return nil
          else
            inst = new
            inst.init_jaxb_json_hash o
            return inst
          end
        end
      end

    end

  end

end

module Org

  module Gedcomx

    module Records

      # A "record" describes the set of fields and other conclusions that are directly extracted from a source
      # during field-based indexed record extraction. A record is designed to more closely match the fields and structure
      # of the sources from which the data is being extracted.
      class Record < Org::Gedcomx::Links::HypermediaEnabledData

        # The type of the record.
        attr_accessor :type
        # The source references for a record.
        attr_accessor :sources
        # The list of identifiers for the person.
        attr_accessor :identifiers
        # The principal person(s) of this record.
        attr_accessor :principalPersons
        # The primary event of this record.
        attr_accessor :primaryEvent
        # A reference to the collection containing the record.
        attr_accessor :collectionRef
        # A reference to a descriptor for the record.
        attr_accessor :descriptorRef
        # The fields that were extracted from the source of this record.
        attr_accessor :fields
        # Notes about a source.
        attr_accessor :notes
        # The attribution metadata for this source description.
        attr_accessor :attribution

        # the json hash for this Record
        def to_jaxb_json_hash
          _h = super
          _h['type'] = type.to_jaxb_json_hash unless type.nil?
          if !sources.nil?
            _ha = Array.new
            sources.each { | _item | _ha.push _item.to_jaxb_json_hash }
            _h['sources'] = _ha
          end
          if !identifiers.nil?
            _ha = Array.new
            identifiers.each { | _item | _ha.push _item.to_jaxb_json_hash }
            _h['identifiers'] = _ha
          end
          if !principalPersons.nil?
            _ha = Array.new
            principalPersons.each { | _item | _ha.push _item.to_jaxb_json_hash }
            _h['principalPersons'] = _ha
          end
          _h['primaryEvent'] = primaryEvent.to_jaxb_json_hash unless primaryEvent.nil?
          _h['collection'] = collectionRef.to_jaxb_json_hash unless collectionRef.nil?
          _h['descriptor'] = descriptorRef.to_jaxb_json_hash unless descriptorRef.nil?
          if !fields.nil?
            _ha = Array.new
            fields.each { | _item | _ha.push _item.to_jaxb_json_hash }
            _h['fields'] = _ha
          end
          if !notes.nil?
            _ha = Array.new
            notes.each { | _item | _ha.push _item.to_jaxb_json_hash }
            _h['notes'] = _ha
          end
          _h['attribution'] = attribution.to_jaxb_json_hash unless attribution.nil?
          return _h
        end

        #initializes this Record with a json hash
        def init_jaxb_json_hash(_o)
          super _o
          @type = String.from_json(_o['type']) unless _o['type'].nil?
          if !_o['sources'].nil?
            @sources = Array.new
            _oa = _o['sources']
            _oa.each { | _item | @sources.push Org::Gedcomx::Source::SourceReference.from_json(_item) }
          end
          if !_o['identifiers'].nil?
            @identifiers = Array.new
            _oa = _o['identifiers']
            _oa.each { | _item | @identifiers.push Org::Gedcomx::Conclusion::Identifier.from_json(_item) }
          end
          if !_o['principalPersons'].nil?
            @principalPersons = Array.new
            _oa = _o['principalPersons']
            _oa.each { | _item | @principalPersons.push Org::Gedcomx::Common::ResourceReference.from_json(_item) }
          end
          @primaryEvent = Org::Gedcomx::Common::ResourceReference.from_json(_o['primaryEvent']) unless _o['primaryEvent'].nil?
          @collectionRef = Org::Gedcomx::Common::ResourceReference.from_json(_o['collection']) unless _o['collection'].nil?
          @descriptorRef = Org::Gedcomx::Common::ResourceReference.from_json(_o['descriptor']) unless _o['descriptor'].nil?
          if !_o['fields'].nil?
            @fields = Array.new
            _oa = _o['fields']
            _oa.each { | _item | @fields.push Org::Gedcomx::Records::Field.from_json(_item) }
          end
          if !_o['notes'].nil?
            @notes = Array.new
            _oa = _o['notes']
            _oa.each { | _item | @notes.push Org::Gedcomx::Common::Note.from_json(_item) }
          end
          @attribution = Org::Gedcomx::Common::Attribution.from_json(_o['attribution']) unless _o['attribution'].nil?
        end

        # constructs a Record from a (parsed) JSON hash
        def self.from_json(o)
          if o.nil?
            return nil
          else
            inst = new
            inst.init_jaxb_json_hash o
            return inst
          end
        end
      end

    end

  end

end

module Org

  module Gedcomx

    module Records

      # <p>A facet value is the value that is used by a facet to group related resources.</p>
      class FacetValue < Org::Gedcomx::Links::HypermediaEnabledData

        # A title for the facet value.
        attr_accessor :title
        # The value.
        attr_accessor :value
        # The number of resources applicable to this value.
        attr_accessor :count

        # the json hash for this FacetValue
        def to_jaxb_json_hash
          _h = super
          _h['title'] = title.to_jaxb_json_hash unless title.nil?
          _h['value'] = value.to_jaxb_json_hash unless value.nil?
          _h['count'] = count.to_jaxb_json_hash unless count.nil?
          return _h
        end

        #initializes this FacetValue with a json hash
        def init_jaxb_json_hash(_o)
          super _o
          @title = String.from_json(_o['title']) unless _o['title'].nil?
          @value = String.from_json(_o['value']) unless _o['value'].nil?
          @count = Fixnum.from_json(_o['count']) unless _o['count'].nil?
        end

        # constructs a FacetValue from a (parsed) JSON hash
        def self.from_json(o)
          if o.nil?
            return nil
          else
            inst = new
            inst.init_jaxb_json_hash o
            return inst
          end
        end
      end

    end

  end

end

module Org

  module Gedcomx

    module Records

      # A description of the coverage of a collection by resource type.
      class CollectionCoverage < Org::Gedcomx::Links::HypermediaEnabledData

        # A completeness factor for this coverage aspect, a value between 0 and 1.
        attr_accessor :completeness
        # The count of the items applicable to this coverage aspect.
        attr_accessor :count
        # The type of record being covered in this collection.
        attr_accessor :recordType
        # The type of resource being covered in this collection.
        attr_accessor :resourceType
        # Spatial coverage.
        attr_accessor :spatial
        # Temporal coverage.
        attr_accessor :temporal

        # the json hash for this CollectionCoverage
        def to_jaxb_json_hash
          _h = super
          _h['completeness'] = completeness.to_jaxb_json_hash unless completeness.nil?
          _h['count'] = count.to_jaxb_json_hash unless count.nil?
          _h['recordType'] = recordType.to_jaxb_json_hash unless recordType.nil?
          _h['resourceType'] = resourceType.to_jaxb_json_hash unless resourceType.nil?
          _h['spatial'] = spatial.to_jaxb_json_hash unless spatial.nil?
          _h['temporal'] = temporal.to_jaxb_json_hash unless temporal.nil?
          return _h
        end

        #initializes this CollectionCoverage with a json hash
        def init_jaxb_json_hash(_o)
          super _o
          @completeness = Float.from_json(_o['completeness']) unless _o['completeness'].nil?
          @count = Fixnum.from_json(_o['count']) unless _o['count'].nil?
          @recordType = String.from_json(_o['recordType']) unless _o['recordType'].nil?
          @resourceType = String.from_json(_o['resourceType']) unless _o['resourceType'].nil?
          @spatial = Org::Gedcomx::Conclusion::PlaceReference.from_json(_o['spatial']) unless _o['spatial'].nil?
          @temporal = Org::Gedcomx::Conclusion::DateInfo.from_json(_o['temporal']) unless _o['temporal'].nil?
        end

        # constructs a CollectionCoverage from a (parsed) JSON hash
        def self.from_json(o)
          if o.nil?
            return nil
          else
            inst = new
            inst.init_jaxb_json_hash o
            return inst
          end
        end
      end

    end

  end

end

module Org

  module Gedcomx

    module Common

      # A reference to a resource that is being used as evidence.
      class EvidenceReference < Org::Gedcomx::Links::HypermediaEnabledData

        # The resource id of the resource being referenced.
        attr_accessor :resourceId
        # The URI to the resource.
        attr_accessor :resource
        # Attribution metadata for evidence reference.
        attr_accessor :attribution

        # the json hash for this EvidenceReference
        def to_jaxb_json_hash
          _h = super
          _h['resourceId'] = resourceId.to_jaxb_json_hash unless resourceId.nil?
          _h['resource'] = resource.to_jaxb_json_hash unless resource.nil?
          _h['attribution'] = attribution.to_jaxb_json_hash unless attribution.nil?
          return _h
        end

        #initializes this EvidenceReference with a json hash
        def init_jaxb_json_hash(_o)
          super _o
          @resourceId = String.from_json(_o['resourceId']) unless _o['resourceId'].nil?
          @resource = String.from_json(_o['resource']) unless _o['resource'].nil?
          @attribution = Org::Gedcomx::Common::Attribution.from_json(_o['attribution']) unless _o['attribution'].nil?
        end

        # constructs a EvidenceReference from a (parsed) JSON hash
        def self.from_json(o)
          if o.nil?
            return nil
          else
            inst = new
            inst.init_jaxb_json_hash o
            return inst
          end
        end
      end

    end

  end

end

module Org

  module Gedcomx

    module Conclusion

      # A genealogical conclusion.
      class Conclusion < Org::Gedcomx::Links::HypermediaEnabledData

        # The level of confidence the contributor has about the data.
        attr_accessor :confidence
        # The language of the conclusion.
        attr_accessor :lang
        # Attribution metadata for a conclusion.
        attr_accessor :attribution
        # The source references for a conclusion.
        attr_accessor :sources
        # A reference to the analysis document explaining the analysis that went into this conclusion.
        attr_accessor :analysis
        # Notes about a person.
        attr_accessor :notes

        # the json hash for this Conclusion
        def to_jaxb_json_hash
          _h = super
          _h['confidence'] = confidence.to_jaxb_json_hash unless confidence.nil?
          _h['lang'] = lang.to_jaxb_json_hash unless lang.nil?
          _h['attribution'] = attribution.to_jaxb_json_hash unless attribution.nil?
          if !sources.nil?
            _ha = Array.new
            sources.each { | _item | _ha.push _item.to_jaxb_json_hash }
            _h['sources'] = _ha
          end
          _h['analysis'] = analysis.to_jaxb_json_hash unless analysis.nil?
          if !notes.nil?
            _ha = Array.new
            notes.each { | _item | _ha.push _item.to_jaxb_json_hash }
            _h['notes'] = _ha
          end
          return _h
        end

        #initializes this Conclusion with a json hash
        def init_jaxb_json_hash(_o)
          super _o
          @confidence = String.from_json(_o['confidence']) unless _o['confidence'].nil?
          @lang = String.from_json(_o['lang']) unless _o['lang'].nil?
          @attribution = Org::Gedcomx::Common::Attribution.from_json(_o['attribution']) unless _o['attribution'].nil?
          if !_o['sources'].nil?
            @sources = Array.new
            _oa = _o['sources']
            _oa.each { | _item | @sources.push Org::Gedcomx::Source::SourceReference.from_json(_item) }
          end
          @analysis = Org::Gedcomx::Common::ResourceReference.from_json(_o['analysis']) unless _o['analysis'].nil?
          if !_o['notes'].nil?
            @notes = Array.new
            _oa = _o['notes']
            _oa.each { | _item | @notes.push Org::Gedcomx::Common::Note.from_json(_item) }
          end
        end

        # constructs a Conclusion from a (parsed) JSON hash
        def self.from_json(o)
          if o.nil?
            return nil
          else
            inst = new
            inst.init_jaxb_json_hash o
            return inst
          end
        end
      end

    end

  end

end

module Org

  module Gedcomx

    module Common

      # A note about a genealogical resource (e.g. conclusion or source).
      class Note < Org::Gedcomx::Links::HypermediaEnabledData

        # The language of the note.
        attr_accessor :lang
        # The subject of the note.
        attr_accessor :subject
        # The text of the note.
        attr_accessor :text
        # Attribution metadata for a note.
        attr_accessor :attribution

        # the json hash for this Note
        def to_jaxb_json_hash
          _h = super
          _h['lang'] = lang.to_jaxb_json_hash unless lang.nil?
          _h['subject'] = subject.to_jaxb_json_hash unless subject.nil?
          _h['text'] = text.to_jaxb_json_hash unless text.nil?
          _h['attribution'] = attribution.to_jaxb_json_hash unless attribution.nil?
          return _h
        end

        #initializes this Note with a json hash
        def init_jaxb_json_hash(_o)
          super _o
          @lang = String.from_json(_o['lang']) unless _o['lang'].nil?
          @subject = String.from_json(_o['subject']) unless _o['subject'].nil?
          @text = String.from_json(_o['text']) unless _o['text'].nil?
          @attribution = Org::Gedcomx::Common::Attribution.from_json(_o['attribution']) unless _o['attribution'].nil?
        end

        # constructs a Note from a (parsed) JSON hash
        def self.from_json(o)
          if o.nil?
            return nil
          else
            inst = new
            inst.init_jaxb_json_hash o
            return inst
          end
        end
      end

    end

  end

end

module Org

  module Gedcomx

    module Records

      # A collection of genealogical resources.
      class Collection < Org::Gedcomx::Links::HypermediaEnabledData

        # The language of this description of the collection
        attr_accessor :lang
        # A title for the collection.
        attr_accessor :title
        # A description for the collection.
        attr_accessor :description
        # A reference to the collection containing this collection.
        attr_accessor :collectionRef
        # The size of the collection, in terms of the number of items in this collection.
        attr_accessor :size
        # The coverage of the collection.
        attr_accessor :coverage
        # The list of facets for the collection, used for convenience in browsing and filtering.
        attr_accessor :facets
        # Attribution metadata for this collection.
        attr_accessor :attribution

        # the json hash for this Collection
        def to_jaxb_json_hash
          _h = super
          _h['lang'] = lang.to_jaxb_json_hash unless lang.nil?
          _h['title'] = title.to_jaxb_json_hash unless title.nil?
          _h['description'] = description.to_jaxb_json_hash unless description.nil?
          _h['collection'] = collectionRef.to_jaxb_json_hash unless collectionRef.nil?
          _h['size'] = size.to_jaxb_json_hash unless size.nil?
          if !coverage.nil?
            _ha = Array.new
            coverage.each { | _item | _ha.push _item.to_jaxb_json_hash }
            _h['coverage'] = _ha
          end
          if !facets.nil?
            _ha = Array.new
            facets.each { | _item | _ha.push _item.to_jaxb_json_hash }
            _h['facets'] = _ha
          end
          _h['attribution'] = attribution.to_jaxb_json_hash unless attribution.nil?
          return _h
        end

        #initializes this Collection with a json hash
        def init_jaxb_json_hash(_o)
          super _o
          @lang = String.from_json(_o['lang']) unless _o['lang'].nil?
          @title = String.from_json(_o['title']) unless _o['title'].nil?
          @description = String.from_json(_o['description']) unless _o['description'].nil?
          @collectionRef = Org::Gedcomx::Common::ResourceReference.from_json(_o['collection']) unless _o['collection'].nil?
          @size = Fixnum.from_json(_o['size']) unless _o['size'].nil?
          if !_o['coverage'].nil?
            @coverage = Array.new
            _oa = _o['coverage']
            _oa.each { | _item | @coverage.push Org::Gedcomx::Records::CollectionCoverage.from_json(_item) }
          end
          if !_o['facets'].nil?
            @facets = Array.new
            _oa = _o['facets']
            _oa.each { | _item | @facets.push Org::Gedcomx::Records::Facet.from_json(_item) }
          end
          @attribution = Org::Gedcomx::Common::Attribution.from_json(_o['attribution']) unless _o['attribution'].nil?
        end

        # constructs a Collection from a (parsed) JSON hash
        def self.from_json(o)
          if o.nil?
            return nil
          else
            inst = new
            inst.init_jaxb_json_hash o
            return inst
          end
        end
      end

    end

  end

end

module Org

  module Gedcomx

    module Agent

      # An agent, e.g. person, organization, or group. In genealogical research, an agent often
      # takes the role of a contributor.
      class Agent < Org::Gedcomx::Links::HypermediaEnabledData

        # The accounts that belong to this person or organization.
        attr_accessor :accounts
        # The addresses that belong to this person or organization.
        attr_accessor :addresses
        # The emails that belong to this person or organization.
        attr_accessor :emails
        # The homepage.
        attr_accessor :homepage
        # The list of identifiers for the agent.
        attr_accessor :identifiers
        # The list of names for the agent.
        attr_accessor :names
        # The &lt;a href=&quot;http://openid.net/&quot;&gt;openid&lt;/a&gt; of the person or organization.
        attr_accessor :openid
        # The phones that belong to this person or organization.
        attr_accessor :phones

        # the json hash for this Agent
        def to_jaxb_json_hash
          _h = super
          if !accounts.nil?
            _ha = Array.new
            accounts.each { | _item | _ha.push _item.to_jaxb_json_hash }
            _h['accounts'] = _ha
          end
          if !addresses.nil?
            _ha = Array.new
            addresses.each { | _item | _ha.push _item.to_jaxb_json_hash }
            _h['addresses'] = _ha
          end
          if !emails.nil?
            _ha = Array.new
            emails.each { | _item | _ha.push _item.to_jaxb_json_hash }
            _h['emails'] = _ha
          end
          _h['homepage'] = homepage.to_jaxb_json_hash unless homepage.nil?
          if !identifiers.nil?
            _ha = Array.new
            identifiers.each { | _item | _ha.push _item.to_jaxb_json_hash }
            _h['identifiers'] = _ha
          end
          if !names.nil?
            _ha = Array.new
            names.each { | _item | _ha.push _item.to_jaxb_json_hash }
            _h['names'] = _ha
          end
          _h['openid'] = openid.to_jaxb_json_hash unless openid.nil?
          if !phones.nil?
            _ha = Array.new
            phones.each { | _item | _ha.push _item.to_jaxb_json_hash }
            _h['phones'] = _ha
          end
          return _h
        end

        #initializes this Agent with a json hash
        def init_jaxb_json_hash(_o)
          super _o
          if !_o['accounts'].nil?
            @accounts = Array.new
            _oa = _o['accounts']
            _oa.each { | _item | @accounts.push Org::Gedcomx::Agent::OnlineAccount.from_json(_item) }
          end
          if !_o['addresses'].nil?
            @addresses = Array.new
            _oa = _o['addresses']
            _oa.each { | _item | @addresses.push Org::Gedcomx::Agent::Address.from_json(_item) }
          end
          if !_o['emails'].nil?
            @emails = Array.new
            _oa = _o['emails']
            _oa.each { | _item | @emails.push Org::Gedcomx::Common::ResourceReference.from_json(_item) }
          end
          @homepage = Org::Gedcomx::Common::ResourceReference.from_json(_o['homepage']) unless _o['homepage'].nil?
          if !_o['identifiers'].nil?
            @identifiers = Array.new
            _oa = _o['identifiers']
            _oa.each { | _item | @identifiers.push Org::Gedcomx::Conclusion::Identifier.from_json(_item) }
          end
          if !_o['names'].nil?
            @names = Array.new
            _oa = _o['names']
            _oa.each { | _item | @names.push Org::Gedcomx::Common::TextValue.from_json(_item) }
          end
          @openid = Org::Gedcomx::Common::ResourceReference.from_json(_o['openid']) unless _o['openid'].nil?
          if !_o['phones'].nil?
            @phones = Array.new
            _oa = _o['phones']
            _oa.each { | _item | @phones.push Org::Gedcomx::Common::ResourceReference.from_json(_item) }
          end
        end

        # constructs a Agent from a (parsed) JSON hash
        def self.from_json(o)
          if o.nil?
            return nil
          else
            inst = new
            inst.init_jaxb_json_hash o
            return inst
          end
        end
      end

    end

  end

end

module Org

  module Gedcomx

    # <p>The GEDCOM X media types define the serialization formats of the GEDCOM X conceptual model. The canonical documentation
    # is provided by the formal specification documents:</p>
    # 
    # <ul>
    # <li><a href="https://github.com/FamilySearch/gedcomx/blob/master/specifications/conceptual-model-specification.md">The GEDCOM X Conceptual Model, Version 1.0</a></li>
    # <li><a href="https://github.com/FamilySearch/gedcomx/blob/master/specifications/json-format-specification.md">The GEDCOM X JSON Format, Version 1.0</a></li>
    # <li><a href="https://github.com/FamilySearch/gedcomx/blob/master/specifications/xml-format-specification.md">The GEDCOM X XML Format, Version 1.0</a></li>
    # </ul>
    # 
    # <p>This documentation is provided as a non-normative reference guide.</p>
    class Gedcomx < Org::Gedcomx::Links::HypermediaEnabledData

      # The language of the genealogical data.
      attr_accessor :lang
      # The attribution of this genealogical data.
      attr_accessor :attribution
      # The persons included in this genealogical data set.
      attr_accessor :persons
      # The relationships included in this genealogical data set.
      attr_accessor :relationships
      # The descriptions of sources included in this genealogical data set.
      attr_accessor :sourceDescriptions
      # The agents included in this genealogical data set.
      attr_accessor :agents
      # The events included in this genealogical data set.
      attr_accessor :events
      # The places included in this genealogical data set.
      attr_accessor :places
      # The documents included in this genealogical data set.
      attr_accessor :documents
      # The collections included in this genealogical data set.
      attr_accessor :collections
      # The records included in this genealogical data set.
      attr_accessor :records
      # The record descriptors included in this genealogical data set.
      attr_accessor :recordDescriptors

      # the json hash for this Gedcomx
      def to_jaxb_json_hash
        _h = super
        _h['lang'] = lang.to_jaxb_json_hash unless lang.nil?
        _h['attribution'] = attribution.to_jaxb_json_hash unless attribution.nil?
        if !persons.nil?
          _ha = Array.new
          persons.each { | _item | _ha.push _item.to_jaxb_json_hash }
          _h['persons'] = _ha
        end
        if !relationships.nil?
          _ha = Array.new
          relationships.each { | _item | _ha.push _item.to_jaxb_json_hash }
          _h['relationships'] = _ha
        end
        if !sourceDescriptions.nil?
          _ha = Array.new
          sourceDescriptions.each { | _item | _ha.push _item.to_jaxb_json_hash }
          _h['sourceDescriptions'] = _ha
        end
        if !agents.nil?
          _ha = Array.new
          agents.each { | _item | _ha.push _item.to_jaxb_json_hash }
          _h['agents'] = _ha
        end
        if !events.nil?
          _ha = Array.new
          events.each { | _item | _ha.push _item.to_jaxb_json_hash }
          _h['events'] = _ha
        end
        if !places.nil?
          _ha = Array.new
          places.each { | _item | _ha.push _item.to_jaxb_json_hash }
          _h['places'] = _ha
        end
        if !documents.nil?
          _ha = Array.new
          documents.each { | _item | _ha.push _item.to_jaxb_json_hash }
          _h['documents'] = _ha
        end
        if !collections.nil?
          _ha = Array.new
          collections.each { | _item | _ha.push _item.to_jaxb_json_hash }
          _h['collections'] = _ha
        end
        if !records.nil?
          _ha = Array.new
          records.each { | _item | _ha.push _item.to_jaxb_json_hash }
          _h['records'] = _ha
        end
        if !recordDescriptors.nil?
          _ha = Array.new
          recordDescriptors.each { | _item | _ha.push _item.to_jaxb_json_hash }
          _h['recordDescriptors'] = _ha
        end
        return _h
      end

      #initializes this Gedcomx with a json hash
      def init_jaxb_json_hash(_o)
        super _o
        @lang = String.from_json(_o['lang']) unless _o['lang'].nil?
        @attribution = Org::Gedcomx::Common::Attribution.from_json(_o['attribution']) unless _o['attribution'].nil?
        if !_o['persons'].nil?
          @persons = Array.new
          _oa = _o['persons']
          _oa.each { | _item | @persons.push Org::Gedcomx::Conclusion::Person.from_json(_item) }
        end
        if !_o['relationships'].nil?
          @relationships = Array.new
          _oa = _o['relationships']
          _oa.each { | _item | @relationships.push Org::Gedcomx::Conclusion::Relationship.from_json(_item) }
        end
        if !_o['sourceDescriptions'].nil?
          @sourceDescriptions = Array.new
          _oa = _o['sourceDescriptions']
          _oa.each { | _item | @sourceDescriptions.push Org::Gedcomx::Source::SourceDescription.from_json(_item) }
        end
        if !_o['agents'].nil?
          @agents = Array.new
          _oa = _o['agents']
          _oa.each { | _item | @agents.push Org::Gedcomx::Agent::Agent.from_json(_item) }
        end
        if !_o['events'].nil?
          @events = Array.new
          _oa = _o['events']
          _oa.each { | _item | @events.push Org::Gedcomx::Conclusion::Event.from_json(_item) }
        end
        if !_o['places'].nil?
          @places = Array.new
          _oa = _o['places']
          _oa.each { | _item | @places.push Org::Gedcomx::Conclusion::PlaceDescription.from_json(_item) }
        end
        if !_o['documents'].nil?
          @documents = Array.new
          _oa = _o['documents']
          _oa.each { | _item | @documents.push Org::Gedcomx::Conclusion::Document.from_json(_item) }
        end
        if !_o['collections'].nil?
          @collections = Array.new
          _oa = _o['collections']
          _oa.each { | _item | @collections.push Org::Gedcomx::Records::Collection.from_json(_item) }
        end
        if !_o['records'].nil?
          @records = Array.new
          _oa = _o['records']
          _oa.each { | _item | @records.push Org::Gedcomx::Records::Record.from_json(_item) }
        end
        if !_o['recordDescriptors'].nil?
          @recordDescriptors = Array.new
          _oa = _o['recordDescriptors']
          _oa.each { | _item | @recordDescriptors.push Org::Gedcomx::Records::RecordDescriptor.from_json(_item) }
        end
      end

      # constructs a Gedcomx from a (parsed) JSON hash
      def self.from_json(o)
        if o.nil?
          return nil
        else
          inst = new
          inst.init_jaxb_json_hash o
          return inst
        end
      end
    end

  end

end

module Org

  module Gedcomx

    module Records

      # An element representing a value in a record field.
      class FieldValue < Org::Gedcomx::Conclusion::Conclusion

        # URI that resolves to the value of the field.
        attr_accessor :resource
        # The datatype of the text value of the field.
        attr_accessor :datatype
        # The type of the field value.
        attr_accessor :type
        # The references to the record field values being used as evidence.
        attr_accessor :fieldValueReferences
        # The text value.
        attr_accessor :text

        # the json hash for this FieldValue
        def to_jaxb_json_hash
          _h = super
          _h['resource'] = resource.to_jaxb_json_hash unless resource.nil?
          _h['datatype'] = datatype.to_jaxb_json_hash unless datatype.nil?
          _h['type'] = type.to_jaxb_json_hash unless type.nil?
          if !fieldValueReferences.nil?
            _ha = Array.new
            fieldValueReferences.each { | _item | _ha.push _item.to_jaxb_json_hash }
            _h['fieldValues'] = _ha
          end
          _h['text'] = text.to_jaxb_json_hash unless text.nil?
          return _h
        end

        #initializes this FieldValue with a json hash
        def init_jaxb_json_hash(_o)
          super _o
          @resource = String.from_json(_o['resource']) unless _o['resource'].nil?
          @datatype = String.from_json(_o['datatype']) unless _o['datatype'].nil?
          @type = String.from_json(_o['type']) unless _o['type'].nil?
          if !_o['fieldValues'].nil?
            @fieldValueReferences = Array.new
            _oa = _o['fieldValues']
            _oa.each { | _item | @fieldValueReferences.push Org::Gedcomx::Common::EvidenceReference.from_json(_item) }
          end
          @text = String.from_json(_o['text']) unless _o['text'].nil?
        end

        # constructs a FieldValue from a (parsed) JSON hash
        def self.from_json(o)
          if o.nil?
            return nil
          else
            inst = new
            inst.init_jaxb_json_hash o
            return inst
          end
        end
      end

    end

  end

end

module Org

  module Gedcomx

    module Conclusion

      # A conclusion about a fact applicable to a person or relationship.
      class Fact < Org::Gedcomx::Conclusion::Conclusion

        # The type of the fact.
        attr_accessor :type
        # The date of applicability of this fact.
        attr_accessor :date
        # The place of applicability of this fact.
        attr_accessor :place
        # The value as supplied by the user.
        attr_accessor :value
        # The qualifiers associated with this fact.
        attr_accessor :qualifiers
        # The references to the record field values being used as evidence.
        attr_accessor :fieldValueReferences

        # the json hash for this Fact
        def to_jaxb_json_hash
          _h = super
          _h['type'] = type.to_jaxb_json_hash unless type.nil?
          _h['date'] = date.to_jaxb_json_hash unless date.nil?
          _h['place'] = place.to_jaxb_json_hash unless place.nil?
          _h['value'] = value.to_jaxb_json_hash unless value.nil?
          if !qualifiers.nil?
            _ha = Array.new
            qualifiers.each { | _item | _ha.push _item.to_jaxb_json_hash }
            _h['qualifiers'] = _ha
          end
          if !fieldValueReferences.nil?
            _ha = Array.new
            fieldValueReferences.each { | _item | _ha.push _item.to_jaxb_json_hash }
            _h['fieldValues'] = _ha
          end
          return _h
        end

        #initializes this Fact with a json hash
        def init_jaxb_json_hash(_o)
          super _o
          @type = String.from_json(_o['type']) unless _o['type'].nil?
          @date = Org::Gedcomx::Conclusion::DateInfo.from_json(_o['date']) unless _o['date'].nil?
          @place = Org::Gedcomx::Conclusion::PlaceReference.from_json(_o['place']) unless _o['place'].nil?
          @value = String.from_json(_o['value']) unless _o['value'].nil?
          if !_o['qualifiers'].nil?
            @qualifiers = Array.new
            _oa = _o['qualifiers']
            _oa.each { | _item | @qualifiers.push Org::Gedcomx::Common::Qualifier.from_json(_item) }
          end
          if !_o['fieldValues'].nil?
            @fieldValueReferences = Array.new
            _oa = _o['fieldValues']
            _oa.each { | _item | @fieldValueReferences.push Org::Gedcomx::Common::EvidenceReference.from_json(_item) }
          end
        end

        # constructs a Fact from a (parsed) JSON hash
        def self.from_json(o)
          if o.nil?
            return nil
          else
            inst = new
            inst.init_jaxb_json_hash o
            return inst
          end
        end
      end

    end

  end

end

module Org

  module Gedcomx

    module Conclusion

      # A gender conclusion.
      class Gender < Org::Gedcomx::Conclusion::Conclusion

        # The type of the gender.
        attr_accessor :type
        # The references to the record field values being used as evidence.
        attr_accessor :fieldValueReferences

        # the json hash for this Gender
        def to_jaxb_json_hash
          _h = super
          _h['type'] = type.to_jaxb_json_hash unless type.nil?
          if !fieldValueReferences.nil?
            _ha = Array.new
            fieldValueReferences.each { | _item | _ha.push _item.to_jaxb_json_hash }
            _h['fieldValues'] = _ha
          end
          return _h
        end

        #initializes this Gender with a json hash
        def init_jaxb_json_hash(_o)
          super _o
          @type = String.from_json(_o['type']) unless _o['type'].nil?
          if !_o['fieldValues'].nil?
            @fieldValueReferences = Array.new
            _oa = _o['fieldValues']
            _oa.each { | _item | @fieldValueReferences.push Org::Gedcomx::Common::EvidenceReference.from_json(_item) }
          end
        end

        # constructs a Gender from a (parsed) JSON hash
        def self.from_json(o)
          if o.nil?
            return nil
          else
            inst = new
            inst.init_jaxb_json_hash o
            return inst
          end
        end
      end

    end

  end

end

module Org

  module Gedcomx

    module Conclusion

      # The <tt>Subject</tt> data type defines the abstract concept of a genealogical <em>subject</em>. A <em>subject</em> is something with a unique and
      # intrinsic identity, e.g., a person, a location on the surface of the earth. We identify that <em>subject</em> in time and space using various supporting
      # <em>conclusions</em>, e.g. for a person: things like name, birth date, age, address, etc. We aggregate these supporting <em>conclusions</em> to form an
      # apparently-unique identity by which we can distinguish our<em>subject</em> from all other possible <em>subjects</em>.
      class Subject < Org::Gedcomx::Conclusion::Conclusion

        # Whether this subject has been identified as &quot;extracted&quot;.
        attr_accessor :extracted
        # References to the evidence being referenced.
        attr_accessor :evidence
        # References to multimedia resources associated with this subject.
        attr_accessor :media
        # The list of identifiers for the subject.
        attr_accessor :identifiers

        # the json hash for this Subject
        def to_jaxb_json_hash
          _h = super
          _h['extracted'] = extracted.to_jaxb_json_hash unless extracted.nil?
          if !evidence.nil?
            _ha = Array.new
            evidence.each { | _item | _ha.push _item.to_jaxb_json_hash }
            _h['evidence'] = _ha
          end
          if !media.nil?
            _ha = Array.new
            media.each { | _item | _ha.push _item.to_jaxb_json_hash }
            _h['media'] = _ha
          end
          if !identifiers.nil?
            _ha = Array.new
            identifiers.each { | _item | _ha.push _item.to_jaxb_json_hash }
            _h['identifiers'] = _ha
          end
          return _h
        end

        #initializes this Subject with a json hash
        def init_jaxb_json_hash(_o)
          super _o
          @extracted = Boolean.from_json(_o['extracted']) unless _o['extracted'].nil?
          if !_o['evidence'].nil?
            @evidence = Array.new
            _oa = _o['evidence']
            _oa.each { | _item | @evidence.push Org::Gedcomx::Common::EvidenceReference.from_json(_item) }
          end
          if !_o['media'].nil?
            @media = Array.new
            _oa = _o['media']
            _oa.each { | _item | @media.push Org::Gedcomx::Source::SourceReference.from_json(_item) }
          end
          if !_o['identifiers'].nil?
            @identifiers = Array.new
            _oa = _o['identifiers']
            _oa.each { | _item | @identifiers.push Org::Gedcomx::Conclusion::Identifier.from_json(_item) }
          end
        end

        # constructs a Subject from a (parsed) JSON hash
        def self.from_json(o)
          if o.nil?
            return nil
          else
            inst = new
            inst.init_jaxb_json_hash o
            return inst
          end
        end
      end

    end

  end

end

module Org

  module Gedcomx

    module Conclusion

      # A name conclusion.
      class Name < Org::Gedcomx::Conclusion::Conclusion

        # The type of the name.
        attr_accessor :type
        # Whether the conclusion is preferred above other conclusions of the same type. Useful, for example, for display purposes.
        attr_accessor :preferred
        # The date the name was first applied or adopted.
        attr_accessor :date
        # Alternate forms of the name, such as the romanized form of a non-latin name.
        attr_accessor :nameForms

        # the json hash for this Name
        def to_jaxb_json_hash
          _h = super
          _h['type'] = type.to_jaxb_json_hash unless type.nil?
          _h['preferred'] = preferred.to_jaxb_json_hash unless preferred.nil?
          _h['date'] = date.to_jaxb_json_hash unless date.nil?
          if !nameForms.nil?
            _ha = Array.new
            nameForms.each { | _item | _ha.push _item.to_jaxb_json_hash }
            _h['nameForms'] = _ha
          end
          return _h
        end

        #initializes this Name with a json hash
        def init_jaxb_json_hash(_o)
          super _o
          @type = String.from_json(_o['type']) unless _o['type'].nil?
          @preferred = Boolean.from_json(_o['preferred']) unless _o['preferred'].nil?
          @date = Org::Gedcomx::Conclusion::DateInfo.from_json(_o['date']) unless _o['date'].nil?
          if !_o['nameForms'].nil?
            @nameForms = Array.new
            _oa = _o['nameForms']
            _oa.each { | _item | @nameForms.push Org::Gedcomx::Conclusion::NameForm.from_json(_item) }
          end
        end

        # constructs a Name from a (parsed) JSON hash
        def self.from_json(o)
          if o.nil?
            return nil
          else
            inst = new
            inst.init_jaxb_json_hash o
            return inst
          end
        end
      end

    end

  end

end

module Org

  module Gedcomx

    module Conclusion

      # A role that a specific person plays in an event.
      class EventRole < Org::Gedcomx::Conclusion::Conclusion

        # The role type.
        attr_accessor :type
        # Reference to the person playing the role in the event.
        attr_accessor :person
        # Details about the role of the person in the event.
        attr_accessor :details

        # the json hash for this EventRole
        def to_jaxb_json_hash
          _h = super
          _h['type'] = type.to_jaxb_json_hash unless type.nil?
          _h['person'] = person.to_jaxb_json_hash unless person.nil?
          _h['details'] = details.to_jaxb_json_hash unless details.nil?
          return _h
        end

        #initializes this EventRole with a json hash
        def init_jaxb_json_hash(_o)
          super _o
          @type = String.from_json(_o['type']) unless _o['type'].nil?
          @person = Org::Gedcomx::Common::ResourceReference.from_json(_o['person']) unless _o['person'].nil?
          @details = String.from_json(_o['details']) unless _o['details'].nil?
        end

        # constructs a EventRole from a (parsed) JSON hash
        def self.from_json(o)
          if o.nil?
            return nil
          else
            inst = new
            inst.init_jaxb_json_hash o
            return inst
          end
        end
      end

    end

  end

end

module Org

  module Gedcomx

    module Conclusion

      # An abstract document that contains derived (conclusionary) text -- for example, a transcription or researcher analysis.
      class Document < Org::Gedcomx::Conclusion::Conclusion

        # The text type of the document.
        attr_accessor :textType
        # Whether this document has been identified as &quot;extracted&quot;.
        attr_accessor :extracted
        # The type of the document.
        attr_accessor :type
        # The document text.
        attr_accessor :text

        # the json hash for this Document
        def to_jaxb_json_hash
          _h = super
          _h['textType'] = textType.to_jaxb_json_hash unless textType.nil?
          _h['extracted'] = extracted.to_jaxb_json_hash unless extracted.nil?
          _h['type'] = type.to_jaxb_json_hash unless type.nil?
          _h['text'] = text.to_jaxb_json_hash unless text.nil?
          return _h
        end

        #initializes this Document with a json hash
        def init_jaxb_json_hash(_o)
          super _o
          @textType = String.from_json(_o['textType']) unless _o['textType'].nil?
          @extracted = Boolean.from_json(_o['extracted']) unless _o['extracted'].nil?
          @type = String.from_json(_o['type']) unless _o['type'].nil?
          @text = String.from_json(_o['text']) unless _o['text'].nil?
        end

        # constructs a Document from a (parsed) JSON hash
        def self.from_json(o)
          if o.nil?
            return nil
          else
            inst = new
            inst.init_jaxb_json_hash o
            return inst
          end
        end
      end

    end

  end

end

module Org

  module Gedcomx

    module Conclusion

      # A PlaceDescription is used to describe the details of a place in terms of its name
      # and possibly its type, time period, and/or a geospatial description -- a description
      # of a place as a snapshot in time.
      class PlaceDescription < Org::Gedcomx::Conclusion::Subject

        # An implementation-specific uniform resource identifier (URI) used to identify the type of a place (e.g., address, city, county, province, state, country, etc.).
        attr_accessor :type
        # An ordered list of standardized (or normalized), fully-qualified (in terms of what is known of the applicable jurisdictional hierarchy) names for this place that are applicable to this description of this place.
        attr_accessor :names
        # A description of the time period to which this place description is relevant.
        attr_accessor :temporalDescription
        # Degrees north or south of the Equator.
        attr_accessor :latitude
        # Angular distance in degrees, relative to the Prime Meridian.
        attr_accessor :longitude
        # A reference to a geospatial description of this place.
        attr_accessor :spatialDescription

        # the json hash for this PlaceDescription
        def to_jaxb_json_hash
          _h = super
          _h['type'] = type.to_jaxb_json_hash unless type.nil?
          if !names.nil?
            _ha = Array.new
            names.each { | _item | _ha.push _item.to_jaxb_json_hash }
            _h['names'] = _ha
          end
          _h['temporalDescription'] = temporalDescription.to_jaxb_json_hash unless temporalDescription.nil?
          _h['latitude'] = latitude.to_jaxb_json_hash unless latitude.nil?
          _h['longitude'] = longitude.to_jaxb_json_hash unless longitude.nil?
          _h['spatialDescription'] = spatialDescription.to_jaxb_json_hash unless spatialDescription.nil?
          return _h
        end

        #initializes this PlaceDescription with a json hash
        def init_jaxb_json_hash(_o)
          super _o
          @type = String.from_json(_o['type']) unless _o['type'].nil?
          if !_o['names'].nil?
            @names = Array.new
            _oa = _o['names']
            _oa.each { | _item | @names.push Org::Gedcomx::Common::TextValue.from_json(_item) }
          end
          @temporalDescription = Org::Gedcomx::Conclusion::DateInfo.from_json(_o['temporalDescription']) unless _o['temporalDescription'].nil?
          @latitude = Float.from_json(_o['latitude']) unless _o['latitude'].nil?
          @longitude = Float.from_json(_o['longitude']) unless _o['longitude'].nil?
          @spatialDescription = Org::Gedcomx::Common::ResourceReference.from_json(_o['spatialDescription']) unless _o['spatialDescription'].nil?
        end

        # constructs a PlaceDescription from a (parsed) JSON hash
        def self.from_json(o)
          if o.nil?
            return nil
          else
            inst = new
            inst.init_jaxb_json_hash o
            return inst
          end
        end
      end

    end

  end

end

module Org

  module Gedcomx

    module Conclusion

      # A relationship between two or more persons.
      class Relationship < Org::Gedcomx::Conclusion::Subject

        # The type of this relationship.
        attr_accessor :type
        # A reference to a person in the relationship. The name &quot;person1&quot; is used only to distinguish it from
        # the other person in this relationship and implies neither order nor role. When the relationship type
        # implies direction, it goes from &quot;person1&quot; to &quot;person2&quot;.
        attr_accessor :person1
        # A reference to a person in the relationship. The name &quot;person2&quot; is used only to distinguish it from
        # the other person in this relationship and implies neither order nor role. When the relationship type
        # implies direction, it goes from &quot;person1&quot; to &quot;person2&quot;.
        attr_accessor :person2
        # The fact conclusions for the relationship.
        attr_accessor :facts
        # The references to the record field values being used as evidence.
        attr_accessor :fieldValueReferences

        # the json hash for this Relationship
        def to_jaxb_json_hash
          _h = super
          _h['type'] = type.to_jaxb_json_hash unless type.nil?
          _h['person1'] = person1.to_jaxb_json_hash unless person1.nil?
          _h['person2'] = person2.to_jaxb_json_hash unless person2.nil?
          if !facts.nil?
            _ha = Array.new
            facts.each { | _item | _ha.push _item.to_jaxb_json_hash }
            _h['facts'] = _ha
          end
          if !fieldValueReferences.nil?
            _ha = Array.new
            fieldValueReferences.each { | _item | _ha.push _item.to_jaxb_json_hash }
            _h['fieldValues'] = _ha
          end
          return _h
        end

        #initializes this Relationship with a json hash
        def init_jaxb_json_hash(_o)
          super _o
          @type = String.from_json(_o['type']) unless _o['type'].nil?
          @person1 = Org::Gedcomx::Common::ResourceReference.from_json(_o['person1']) unless _o['person1'].nil?
          @person2 = Org::Gedcomx::Common::ResourceReference.from_json(_o['person2']) unless _o['person2'].nil?
          if !_o['facts'].nil?
            @facts = Array.new
            _oa = _o['facts']
            _oa.each { | _item | @facts.push Org::Gedcomx::Conclusion::Fact.from_json(_item) }
          end
          if !_o['fieldValues'].nil?
            @fieldValueReferences = Array.new
            _oa = _o['fieldValues']
            _oa.each { | _item | @fieldValueReferences.push Org::Gedcomx::Common::EvidenceReference.from_json(_item) }
          end
        end

        # constructs a Relationship from a (parsed) JSON hash
        def self.from_json(o)
          if o.nil?
            return nil
          else
            inst = new
            inst.init_jaxb_json_hash o
            return inst
          end
        end
      end

    end

  end

end

module Org

  module Gedcomx

    module Conclusion

      # A person.
      class Person < Org::Gedcomx::Conclusion::Subject

        # A reference to the collection containing the person.
        attr_accessor :collectionRef
        # Whether this person has been designated for limited distribution or display.
        attr_accessor :private
        # Living status of the person as treated by the system.
        attr_accessor :living
        # The gender conclusion for the person.
        attr_accessor :gender
        # The name conclusions for the person.
        attr_accessor :names
        # The fact conclusions for the person.
        attr_accessor :facts
        # Display properties for the person. Display properties are not specified by GEDCOM X core, but as extension elements by GEDCOM X RS.
        attr_accessor :displayExtension

        # the json hash for this Person
        def to_jaxb_json_hash
          _h = super
          _h['collection'] = collectionRef.to_jaxb_json_hash unless collectionRef.nil?
          _h['private'] = private.to_jaxb_json_hash unless private.nil?
          _h['living'] = living.to_jaxb_json_hash unless living.nil?
          _h['gender'] = gender.to_jaxb_json_hash unless gender.nil?
          if !names.nil?
            _ha = Array.new
            names.each { | _item | _ha.push _item.to_jaxb_json_hash }
            _h['names'] = _ha
          end
          if !facts.nil?
            _ha = Array.new
            facts.each { | _item | _ha.push _item.to_jaxb_json_hash }
            _h['facts'] = _ha
          end
          _h['display'] = displayExtension.to_jaxb_json_hash unless displayExtension.nil?
          return _h
        end

        #initializes this Person with a json hash
        def init_jaxb_json_hash(_o)
          super _o
          @collectionRef = String.from_json(_o['collection']) unless _o['collection'].nil?
          @private = Boolean.from_json(_o['private']) unless _o['private'].nil?
          @living = Boolean.from_json(_o['living']) unless _o['living'].nil?
          @gender = Org::Gedcomx::Conclusion::Gender.from_json(_o['gender']) unless _o['gender'].nil?
          if !_o['names'].nil?
            @names = Array.new
            _oa = _o['names']
            _oa.each { | _item | @names.push Org::Gedcomx::Conclusion::Name.from_json(_item) }
          end
          if !_o['facts'].nil?
            @facts = Array.new
            _oa = _o['facts']
            _oa.each { | _item | @facts.push Org::Gedcomx::Conclusion::Fact.from_json(_item) }
          end
          @displayExtension = Org::Gedcomx::Conclusion::DisplayProperties.from_json(_o['display']) unless _o['display'].nil?
        end

        # constructs a Person from a (parsed) JSON hash
        def self.from_json(o)
          if o.nil?
            return nil
          else
            inst = new
            inst.init_jaxb_json_hash o
            return inst
          end
        end
      end

    end

  end

end

module Org

  module Gedcomx

    module Conclusion

      # A historical event.
      class Event < Org::Gedcomx::Conclusion::Subject

        # The type of the event.
        attr_accessor :type
        # The date of this event.
        attr_accessor :date
        # The place of this event.
        attr_accessor :place
        # The roles played in this event.
        attr_accessor :roles

        # the json hash for this Event
        def to_jaxb_json_hash
          _h = super
          _h['type'] = type.to_jaxb_json_hash unless type.nil?
          _h['date'] = date.to_jaxb_json_hash unless date.nil?
          _h['place'] = place.to_jaxb_json_hash unless place.nil?
          if !roles.nil?
            _ha = Array.new
            roles.each { | _item | _ha.push _item.to_jaxb_json_hash }
            _h['roles'] = _ha
          end
          return _h
        end

        #initializes this Event with a json hash
        def init_jaxb_json_hash(_o)
          super _o
          @type = String.from_json(_o['type']) unless _o['type'].nil?
          @date = Org::Gedcomx::Conclusion::DateInfo.from_json(_o['date']) unless _o['date'].nil?
          @place = Org::Gedcomx::Conclusion::PlaceReference.from_json(_o['place']) unless _o['place'].nil?
          if !_o['roles'].nil?
            @roles = Array.new
            _oa = _o['roles']
            _oa.each { | _item | @roles.push Org::Gedcomx::Conclusion::EventRole.from_json(_item) }
          end
        end

        # constructs a Event from a (parsed) JSON hash
        def self.from_json(o)
          if o.nil?
            return nil
          else
            inst = new
            inst.init_jaxb_json_hash o
            return inst
          end
        end
      end

    end

  end

end